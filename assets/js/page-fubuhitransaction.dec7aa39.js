(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{549:function(v,_,a){v.exports=a.p+"assets/img/分布式事务-1649804696250.92597051.png"},550:function(v,_,a){v.exports=a.p+"assets/img/分布式事务-1649805216922.208be553.png"},667:function(v,_,a){"use strict";a.r(_);var t=a(1),s=Object(t.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("解决跨库操作的数据一致性问题：")]),v._v(" "),t("p",[v._v("在分布式或者微服务架构中，每个服务都有自己的数据源，使用不同事务管理器，如果A服务去调用B服务，B服务执行失败了，A服务的事务和B服务的事务都会回滚，这时候是不存在事务问题的，但是如果A服务B服务执行成功之后出现异常，A服务的事原子性务会回滚，但是B服务的事务不会回滚，此时就存在分布式事务问题。")]),v._v(" "),t("h2",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[v._v("#")]),v._v(" 使用场景：")]),v._v(" "),t("ul",[t("li",[v._v("转账：包含转出和转入操作")]),v._v(" "),t("li",[v._v("网购：包含下单、扣减库存、支付操")])]),v._v(" "),t("h3",{attrs:{id:"事务的4个特性acid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务的4个特性acid"}},[v._v("#")]),v._v(" 事务的4个特性ACID")]),v._v(" "),t("p",[v._v("原子性（Atomicity）：操作这些指令时，要么全部执行成功，要么全部不执行。只要其中一个指令执行失败，所有的指令都执行失败，数据进行回滚，回到执行指令前的数据状态。")]),v._v(" "),t("p",[v._v("一致性（Consistency）"),t("Badge",{attrs:{text:"总量不变"}}),v._v("：事务的执行使数据从一个状态转换为另一个状态，数据库的完整性约束没有被破坏。")],1),v._v(" "),t("blockquote",[t("p",[v._v("拿转账来说，假设用户A和用户B 两者的钱加起来一共是2000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是2000，这就是事务的一致性。")])]),v._v(" "),t("p",[v._v("隔离性（Isolation）"),t("Badge",{attrs:{text:"信息彼此独立，互不干扰"}}),v._v("：隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。")],1),v._v(" "),t("blockquote",[t("p",[v._v("即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。")])]),v._v(" "),t("p",[v._v("持久性（Durability）：当事务正确完成后，它对于数据的改变是永久性的。不会轻易丢失")]),v._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("begin")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("transaction")]),v._v("； \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 本地数据库操作：张三减少金额 ")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 本地数据库操作：李四增加金额 ")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("commit")]),v._v(" transation"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br")])]),t("p",[v._v("随着互联网的快速发展，软件系统由原来的单体应用转变为分布式应用，下图描述了单体应用向微服务的演变：分布式系统会把一个应用系统拆分为可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成事务操 作，这种分布式系统环境下由不同的服务之间通过网络远程协作完成事务称之为分布式事务，例如用户注册送积分 事务、创建订单减库存事务，银行转账事务等都是分布式事务。")]),v._v(" "),t("p",[v._v("典型的场景就是微服务架构 微服务之间通过远程调用完成事务操作。 比如：订单微服务和库存微服务，下单的 同时订单微服务请求库存微服务减库存。 简言之：跨JVM进程产生分布式事务。")]),v._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("begin")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("transaction")]),v._v("；\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//1.本地数据库操作：张三减少金额")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//2.远程调用：让李四增加金额 ")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("commit")]),v._v(" transation"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br")])]),t("h3",{attrs:{id:"cap定理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cap定理"}},[v._v("#")]),v._v(" CAP定理")]),v._v(" "),t("p",[v._v("CAP原则指的是在一个分布式系统中，不可能同时满足以下三点。")]),v._v(" "),t("p",[v._v("一致性（Consistency）"),t("Badge",{attrs:{text:"副本最新"}})],1),v._v(" "),t("p",[v._v("指强一致性，在写操作完成后开始的任何读操作都必须返回该值，或者后续写操作的结果。")]),v._v(" "),t("p",[v._v("可用性（Availability）"),t("Badge",{attrs:{text:"高可用"}}),v._v("：")],1),v._v(" "),t("p",[v._v("可用性是指，每次向未崩溃的节点发送请求，总能保证收到响应数据（允许不是最新数据）")]),v._v(" "),t("p",[v._v("分区容忍性（Partition tolerance）"),t("Badge",{attrs:{text:"能容忍网络分区"}}),v._v("：分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务,，也就是说，服务器A和B发送给对方的任何消息都是可以放弃的，也就是说A和B可能因为各种意外情况，导致无法成功进行同步，分布式系统要能容忍这种情况。除非整个网络环境都发生了故障。")],1),v._v(" "),t("ol",[t("li",[v._v("使用MQ")]),v._v(" "),t("li",[v._v("使用Seata")])]),v._v(" "),t("p",[v._v("CP  满足原子和分区容错，也就是说，要放弃可用。当系统被分区，为了保证原子性，必须放弃可用性，让服务停用。\nAP 满足可用性和分区容错，当出现分区，同时为了保证可用性，必须让节点继续对外服务，这样必然导致失去原子性。")]),v._v(" "),t("h3",{attrs:{id:"一致性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一致性"}},[v._v("#")]),v._v(" 一致性 "),t("Badge",{attrs:{text:"数据一致性"}})],1),v._v(" "),t("p",[v._v("一致性可以分为强一致性与弱一致性。所谓强一致性，即复制是同步的，弱一致性，即复制是异步的。")]),v._v(" "),t("p",[v._v("ap 不是完全放弃数据一致性，而是牺牲强一致性换取弱一致性。")]),v._v(" "),t("h2",{attrs:{id:"seata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#seata"}},[v._v("#")]),v._v(" seata")]),v._v(" "),t("ul",[t("li",[v._v("TC (Transaction Coordinator) - 事务协调者\n维护全局和分支事务的状态，驱动全局事务提交或回滚；")]),v._v(" "),t("li",[v._v("TM (Transaction Manager) - 事务管理器\n定义全局事务的范围：开始全局事务、提交或回滚全局事务；")]),v._v(" "),t("li",[v._v("RM (Resource Manager) - 资源管理器\n管理分支事务处理的资源，与TC交互以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚；")])]),v._v(" "),t("p",[v._v("Seata是阿里巴巴退出的一款用来解决分布式事务问题的框架，他经过天猫双十一的考验，很有可能成为解决分布式事务问题的主流框架")]),v._v(" "),t("p",[v._v("4、Seata分布式事务框架实现原理？")]),v._v(" "),t("p",[v._v("Seata有三个组成部分：事务协调器TC：协调者、事务管理器TM：发起方、资源管理器RM：参与方")]),v._v(" "),t("ol",[t("li",[v._v("发起方会向协调者申请一个全局事务id ，并保存到ThreadLocal中（为什么要保存到ThreadLocal中？弱引用，线程之间不会发生数据冲突）")]),v._v(" "),t("li",[v._v("Seata 数据源代理发起方和参与方的数据源，将前置镜像和后置镜像写入到undo_log表中，方便后期回滚使用")]),v._v(" "),t("li",[v._v("发起方获取全局事务id，通过改写Feign客户端请求头传入全局事务id。")]),v._v(" "),t("li",[v._v("参与方从请求头中获取全局事务id保存到ThreadLocal中，并把该分支注册到SeataServer中。")]),v._v(" "),t("li",[v._v("如果没有出现异常，发起方会通知协调者，协调者通知所有分支，通过全局事务id和本地事务id删除undo_log数据，如果出现异常，通过undo_log逆向生成sql语句并执行，然后删除undo_log语句。如果处理业务逻辑代码超时，也会回滚")])]),v._v(" "),t("h2",{attrs:{id:"at事务模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#at事务模式"}},[v._v("#")]),v._v(" AT事务模式")]),v._v(" "),t("p",[v._v("分布式事务工作机制")]),v._v(" "),t("p",[v._v("前提： 基于支持本地 ACID 事务的关系型数据库；（mysql、oracle）")]),v._v(" "),t("p",[v._v("Java 应用，通过JDBC访问数据库；")]),v._v(" "),t("p",[v._v("整体机制就是两阶段提交协议的演变：")]),v._v(" "),t("p",[v._v("一阶段： “业务数据“和“回滚日志记录“在同一个本地事务中提交，释放本地锁和连接资源；")]),v._v(" "),t("p",[v._v("二阶段： 如果没有异常异步化提交，非常快速地完成； 如果有异常回滚通过一阶段的回滚日志进行反向补偿；")]),v._v(" "),t("p",[v._v("具体举例说明整个AT分支的工作过程：")]),v._v(" "),t("h2",{attrs:{id:"saga事务模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#saga事务模式"}},[v._v("#")]),v._v(" saga事务模式")]),v._v(" "),t("p",[v._v("又称为Long-running-transaction(长事务)，核心思想是把一个长事务分为多个本地事务来完成，由一个"),t("code",[v._v("Process Manager")]),v._v(" 统一协调。如果成功，则继续往下执行，如果失败，则调用补偿操作。")]),v._v(" "),t("p",[v._v("每个业务都至少需要实现正向、反向两个接口。")]),v._v(" "),t("p",[v._v("我们看如下一个业务场景。在购买旅游套餐业务操作涉及到三个操作，他们分别是预定车辆，预定宾馆，预定机票，他们分别属于三个不同的远程接口。可能从我们程序的角度来说他们不属于一个事务，但是从业务角度来说是属于同一个事务的。")]),v._v(" "),t("p",[t("img",{attrs:{src:a(549),alt:"saga案例",loading:"lazy"}})]),v._v(" "),t("p",[v._v("他们的执行顺序如上图所示，所以当发生失败时，会依次进行取消的补偿操作。")]),v._v(" "),t("p",[v._v("因为长事务被拆分了很多个业务流，所以 Saga 事务模型最重要的一个部件就是流程管理器(Process Manager)。")]),v._v(" "),t("p",[v._v("在执行到第3步时，发生了失败，回退的过程也比较复杂，特别是子业务比较多的场景。")]),v._v(" "),t("p",[v._v("如何实现数据的一致性呢？如下罗列了一些方案。")]),v._v(" "),t("ol",[t("li",[v._v("如果失败，可以发生消息到MQ，消费者根据状态，去重试，或者执行回退操作。同时，也可以进一步检查数据的一致性。")]),v._v(" "),t("li",[v._v("建立一个定时任务去检查数据的完整性，如果第3步失败了，定时任务会检测到并修复数据。")]),v._v(" "),t("li",[v._v("本地操作日志或DB日志。")])]),v._v(" "),t("h2",{attrs:{id:"tcc事务模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcc事务模型"}},[v._v("#")]),v._v(" TCC事务模型")]),v._v(" "),t("p",[v._v("TCC(Try Confirm Cancel)事务模型的思想和2PC提交有点类似。下图是TCC和2PC(XA)的对比。")]),v._v(" "),t("p",[t("img",{attrs:{src:a(550),alt:"TCC实物模型的思想和2PC提交比较",loading:"lazy"}})]),v._v(" "),t("ol",[t("li",[v._v("在阶段一：XA模型中，各个RM准备提交各自的事务分支，事实上就是准备提交资源的更新操作（insert、delete、update等），而在TCC中，是主业务活动请求(try)各个从业务服务检查和预留资源。")]),v._v(" "),t("li",[v._v("阶段二：2PC（XA）根据第一阶段每个RM是否都prepare成功，判断是要提交还是回滚。如果都prepare成功，那么就commit每个事务分支，反之则rollback每个事务分支。")]),v._v(" "),t("li",[v._v("TCC中，如果在第一阶段所有业务资源都预留成功，那么confirm各个从业务服务，否则取消(cancel)所有从业务服务的资源预留请求。")])]),v._v(" "),t("p",[v._v("TCC两阶段提交与2PC/XA两阶段提交的区别是：")]),v._v(" "),t("ul",[t("li",[v._v("2PC是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁。")]),v._v(" "),t("li",[v._v("TCC是业务层面的分布式事务，最终一致性，不会一直持有资源的锁。")])]),v._v(" "),t("p",[v._v("是目前最火的一种柔性事务方案，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作")]),v._v(" "),t("p",[v._v("所谓的 TCC 编程模式，也是两阶段提交的一个变种，不同的是 TCC 为在业务层编写代码实现的两阶段提交。")]),v._v(" "),t("h3",{attrs:{id:"注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[v._v("#")]),v._v(" 注意事项：")]),v._v(" "),t("p",[v._v("最常见的主要是这三种异常，分别是空回滚、幂等、悬挂。")]),v._v(" "),t("p",[v._v("1、允许空回滚：")]),v._v(" "),t("p",[v._v("事务协调器在调用TCC服务的一阶段TRY操作时，可能会出现因为丢包而导致的网络超时，此时事务协调器会触发二阶段回滚，调用TCC服务的CANCEL操作；")]),v._v(" "),t("p",[v._v("TCC服务在未收到TRY请求的情况下受到CANCEL请求，这种场景被称为空回滚；TCC服务在实现时应当允许空回滚的执行。")]),v._v(" "),t("p",[v._v("那怎么解决空回滚呢？前面提到，Cancel 要识别出空回滚，直接返回成功。那关键就是要识别出这个空回滚。**思路很简单就是需要知道一阶段是否执行，如果执行了，那就是正常回滚；**如果没执行，那就是空回滚。因此，需要一张额外的事务控制表，其中有分布式事务 ID 和分支事务 ID，第一阶段 Try 方法里会插入一条记录，表示一阶段执行了。Cancel 接口里读取该记录，如果该记录存在，则正常回滚；如果该记录不存在，则是空回滚。")]),v._v(" "),t("p",[v._v("3、防悬挂控制")]),v._v(" "),t("p",[v._v("事务协调器在调用TCC服务的一阶段TRY操作时，可能会出现网络拥堵而导致的超时，此时事务协调器会触发二阶段回滚，调用TCC服务的CANCEL操作；在此之后，拥堵在网络上的一阶段TRY数据包被TCC服务收到，出现了二阶段CanCEL请求比一阶段TRY请求先执行的情况。")]),v._v(" "),t("p",[v._v("用户在实现TCC服务时，应该允许空回滚，但是要拒绝执行空回滚之后到来的一阶段TRY请求；")]),v._v(" "),t("p",[v._v("大家是否想到了刚才解决空回滚和幂等时用到的事务控制表，可以在二阶段执行时插入一条事务控制记录，状态为已回滚，这样当一阶段执行时，先读取该记录，如果记录存在，就认为二阶段已经执行；否则二阶段没执行。")]),v._v(" "),t("p",[v._v("4、幂等控制")]),v._v(" "),t("p",[v._v("无论是网络数据包重传，还是异常事务的补偿执行；用户在实现TCC，需要考虑幂等控制，即TRY、CONFIRM、CANCEL执行一次和执行多次的业务结果是一样的；")]),v._v(" "),t("p",[v._v("接下来是幂等。幂等就是对于同一个分布式事务的同一个分支事务，重复去调用该分支事务的第二阶段接口，因此，要求 TCC 的二阶段 Confirm 和 Cancel 接口保证幂等，不会重复使用或者释放资源。如果幂等控制没有做好，很有可能导致资损等严重问题。")]),v._v(" "),t("p",[v._v("什么样的情形会造成重复提交或回滚？从图中可以看到，提交或回滚是一次 TC 到参与者的网络调用。因此，网络故障、参与者宕机等都有可能造成参与者 TCC 资源实际执行了二阶段防范，但是 TC 没有收到返回结果的情况，这时，TC 就会重复调用，直至调用成功，整个分布式事务结束。")]),v._v(" "),t("p",[v._v("TCC 分别指 Try、Confirm、Cancel ，一个业务操作要对应的写这三个方法。")]),v._v(" "),t("p",[v._v("第一阶段")]),v._v(" "),t("p",[v._v("Try（尝试）：")]),v._v(" "),t("p",[v._v("完成所有业务检查(一致性)\n预留必须业务资源(准隔离性)")]),v._v(" "),t("p",[v._v("第二阶段")]),v._v(" "),t("p",[v._v("本阶段根据第一阶段的结果，决定是执行confirm还是cancel")]),v._v(" "),t("p",[v._v("Confirm（确认）：")]),v._v(" "),t("ul",[t("li",[v._v("执行真正的业务执行业务")]),v._v(" "),t("li",[v._v("不做任何业务检查")]),v._v(" "),t("li",[v._v("只使用Try阶段预留的业务资源")]),v._v(" "),t("li",[v._v("释放Try阶段预留的业务资源")])]),v._v(" "),t("p",[v._v("Cancle（取消）")]),v._v(" "),t("ul",[t("li",[v._v("释放Try阶段预留的业务资源")])]),v._v(" "),t("p",[v._v("以下单扣库存为例，")]),v._v(" "),t("ul",[t("li",[v._v("Try 阶段去占库存（资源的检测与预留）；")]),v._v(" "),t("li",[v._v("Confirm 阶段则实际扣库存（执行的业务操作提交）；")]),v._v(" "),t("li",[v._v("如果库存扣减失败 Cancel 阶段进行回滚，释放库存（预留资源释放）；")])]),v._v(" "),t("h3",{attrs:{id:"一个完整的tcc事务参与方包括三部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个完整的tcc事务参与方包括三部分"}},[v._v("#")]),v._v(" 一个完整的TCC事务参与方包括三部分：")]),v._v(" "),t("ul",[t("li",[v._v("发起方")]),v._v(" "),t("li",[v._v("参与方：服务必须实现Try、Confirm 和Cancel三个接口，供发起方服务调用，由于Confirm和Cancel操作可能被重复调用，故要求Confirm和Cancel两个接口必须是幂等的。")]),v._v(" "),t("li",[v._v("tc：记录维护TCC全局事务的事务状态和每个从业务服务的子事务状态，并在业务活动提交时确认所有的TCC型操作的confirm操作，在业务活动取消时调用所有TCC型操作的cancel操作。")])]),v._v(" "),t("p",[v._v("并发控制 ➢允许空回滚 ➢防悬挂控制 ➢幂等控制")]),v._v(" "),t("p",[v._v("TCC 不存在资源阻塞的问题，因为每个方法都直接进行事务的提交，一旦出现异常通过则 Cancel 来进行回滚补偿，这也就是常说的补偿性事务。")]),v._v(" "),t("p",[v._v("原本一个方法，现在却需要三个方法来支持，可以看到 TCC 对业务的侵入性很强，而且这种模式并不能很好地被复用，会导致开发量激增。还要考虑到网络波动等原因，")]),v._v(" "),t("p",[v._v("为保证请求一定送达都会有重试机制，所以考虑到接口的幂等性。")]),v._v(" "),t("h3",{attrs:{id:"tcc-案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcc-案例"}},[v._v("#")]),v._v(" tcc 案例")]),v._v(" "),t("p",[v._v("账务拆分的业务场景如下，分别位于三个不同分库的帐户A、B、C，A和B一起向C转帐共80元：")]),v._v(" "),t("p",[v._v("1、Try：尝试执行业务。")]),v._v(" "),t("p",[v._v("完成所有业务检查(一致性)：检查A、B、C的帐户状态是否正常，帐户A的余额是否不少于30元，帐户B的余额是否不少于50元。")]),v._v(" "),t("p",[v._v("预留必须业务资源(准隔离性)：帐户A的冻结金额增加30元，帐户B的冻结金额增加50元，这样就保证不会出现其他并发进程扣减了这两个帐户的余额而导致在后续的真正转帐操作过程中，帐户A和B的可用余额不够的情况。")]),v._v(" "),t("p",[v._v("2、Confirm：确认执行业务。")]),v._v(" "),t("p",[v._v("真正执行业务：如果Try阶段帐户A、B、C状态正常，且帐户A、B余额够用，则执行帐户A给账户C转账30元、帐户B给账户C转账50元的转帐操作。")]),v._v(" "),t("p",[v._v("不做任何业务检查：这时已经不需要做业务检查，Try阶段已经完成了业务检查。")]),v._v(" "),t("p",[v._v("只使用Try阶段预留的业务资源：只需要使用Try阶段帐户A和帐户B冻结的金额即可。")]),v._v(" "),t("p",[v._v("3、Cancel：取消执行业务")]),v._v(" "),t("p",[v._v("释放Try阶段预留的业务资源：如果Try阶段部分成功，比如帐户A的余额够用，且冻结相应金额成功，帐户B的余额不够而冻结失败，则需要对帐户A做Cancel操作，将帐户A被冻结的金额解冻掉。")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://gitee.com/SHIJINGSPACE/seata-tcc-main",target:"_blank",rel:"noopener noreferrer"}},[v._v("实例代码"),t("OutboundLink")],1)]),v._v(" "),t("h3",{attrs:{id:"一个稳定的、高可用的、扩展性强的tcc事务管理器-seata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个稳定的、高可用的、扩展性强的tcc事务管理器-seata"}},[v._v("#")]),v._v(" 一个稳定的、高可用的、扩展性强的TCC事务管理器（seata）")]),v._v(" "),t("h3",{attrs:{id:"tcc事务的优点和限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcc事务的优点和限制"}},[v._v("#")]),v._v(" TCC事务的优点和限制")]),v._v(" "),t("p",[v._v("解决了跨应用业务操作的原子性问题，在诸如组合支付、账务拆分场景非常实用。")]),v._v(" "),t("p",[v._v("TCC实际上把数据库层的二阶段提交上提到了应用层来实现，对于数据库来说是一阶段提交，规避了数据库层的2PC性能低下问题。")]),v._v(" "),t("p",[v._v("TCC事务的缺点，主要就一个：")]),v._v(" "),t("p",[v._v("TCC的Try、Confirm和Cancel操作功能需业务提供，开发成本高。")]),v._v(" "),t("p",[v._v("当然，对TCC事务的这个缺点是否是缺点，是一个见仁见智的事情。")]),v._v(" "),t("h2",{attrs:{id:"基于消息的分布式事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于消息的分布式事务"}},[v._v("#")]),v._v(" 基于消息的分布式事务")]),v._v(" "),t("p",[v._v("基于消息的分布式事务与上面的方案很不同，适合执行周期长且实时性要求不高的场景。")]),v._v(" "),t("p",[v._v("基于消息的分布式事务是指当发起方执行完本地事务后并发出一条消息，参与方一定能够接收消息并处理事务成功，此方案强调的是只要消息发给参与方最终事务要达到一致。")]),v._v(" "),t("p",[v._v("一般使用消息中间件完成。")]),v._v(" "),t("p",[v._v("事务发起方（消息生产方）将消息发给消息中间件，事务参与方从消息中间件接收消息，事务发起方和消息中间件之间，事务参与方（消息消费方）和消息中间件之间都是通过网络通信。")]),v._v(" "),t("p",[v._v("发起方将消息发给消息中间件，参与方从消息中间件接收消息，发起方和消息中间件之间，参与方和消息中间件之间都是通过网络通信。")]),v._v(" "),t("p",[v._v("本地事务与消息发送的原子性问题")]),v._v(" "),t("ul",[t("li",[v._v("保证数据库操作与发送消息的一致性，不会出现只有一个成功，另一个不成功的情况")]),v._v(" "),t("li",[v._v("事务参与方接收消息的可靠性")]),v._v(" "),t("li",[v._v("事务参与方必须能够从消息队列接收到消息，如果接收消息失败可以重复接收消息")]),v._v(" "),t("li",[v._v("消息重复消费的问题")])]),v._v(" "),t("p",[v._v("由于网络的存在，若某一个消费节点超时但是消费成功，此时消息中间件会重复投递此消息，就导致了消息的重复消费")]),v._v(" "),t("p",[v._v("RocketMQ 事务消息设计则主要是为了解决发起方的消息发送与本地事务执行的原子性问题，")]),v._v(" "),t("p",[v._v("RocketMQ 的设计中 broker 与提供者的双向通信能力，使得 broker 天生可以作为一个事务协调者存在；而 RocketMQ 本身提供的存储机制为事务消息提供了持久化能力；")]),v._v(" "),t("p",[v._v("RocketMQ 的高可用机制以及可靠消息设计则为事务消息在系统发生异常时依然能够保证达成事务的最终一致性。")]),v._v(" "),t("p",[v._v("发起方发消息到mq，mq 将消息状态标记为prepared，这条消息消费者无法消费到。")]),v._v(" "),t("p",[v._v("mq接受到发起方发送的消息回应发送成功")]),v._v(" "),t("p",[v._v("发起方执行本地业务代码； 本地事务执行成功，向mq发送commit消息，mq 接受到commit 消息把状态置为可消费，此时消费者（参与方）正常消费消息 参与方本地事务执行失败，向mq发送rollback 消息，mq接收到rollback 消息删除消息 参与方消费消息成功向mq回应ack 确认消费消息成功，否则重复接收，这里ack默认自动回应。 如果参与者执行本地事务时，宕机或超时，mq 会不停询问同组的其他消费者来获取事务执行状态。mq 会根据会回查结构来确定是否投递消息；")])])}),[],!1,null,null,null);_.default=s.exports}}]);