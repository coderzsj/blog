import { Vuepress } from '@vuepress/client/lib/components/Vuepress'

const routeItems = [
  ["v-8daa1a0e","/",{"title":"home","icon":"home","type":"home","readingTime":{"minutes":0,"words":0},"excerpt":"","date":"2022-04-13T01:38:50.000Z"},["/index.html","/README.md"]],
  ["v-74bc627b","/about/",{"title":"intro","icon":"people","type":"page","readingTime":{"minutes":0.16,"words":49},"excerpt":"姓名: 张士敬 职业：软件开发工程师 大学：太原理工大学 性别: 男 年龄: 20~30 婚姻情况: 未婚 爱好: 历史、篮球、编程、书法 照片: 无","date":"2022-04-13T01:38:50.000Z","tag":["个人介绍"]},["/about/index.html","/about/readme.md"]],
  ["v-1203e8d1","/about/worklife.html",{"title":"关于网站","icon":"info","type":"page","readingTime":{"minutes":0.67,"words":202},"excerpt":"关于网站 网站使用 VuePress 建站工具构建，使用主题 vuepress-theme-hope 19 年，springbatch，azkaban，银行业务票据管理系统 20 疫情原因，在家待了两个月，参加工作岗前培训了两个月，内容 vue，oracle 等国家局的前后端框架，成都出差半年多，参与异地数据转换，一直干医保业务，主要是登记类业务 21 去贵","date":"2022-04-13T01:38:50.000Z"},["/about/worklife","/about/worklife.md"]],
  ["v-471599de","/algo/algorithm-eight-queens.html",{"title":"8Queens","icon":"algo","type":"article","readingTime":{"minutes":0.5,"words":149},"excerpt":"八皇后","date":"2022-04-13T18:37:08.000Z","category":["algo"],"tag":["algo"]},["/algo/algorithm-eight-queens","/algo/algorithm-eight-queens.md"]],
  ["v-035d0f3d","/algo/dynamic-programming-idea.html",{"title":"","type":"article","readingTime":{"minutes":0.2,"words":60},"excerpt":"动态规划，无非就是利用历史纪录，以便我们的重复计算。而这些历史纪录，我们得需要一些变量来保存，一般就是用一维数组或者二维数组来保存。"},["/algo/dynamic-programming-idea","/algo/dynamic-programming-idea.md"]],
  ["v-737b4bf7","/algo/linked-list-determines-that-there-is-a-cycle-recursive-inversion.html",{"title":"linked-list-algorithm","icon":"algo","type":"article","readingTime":{"minutes":1.44,"words":432},"excerpt":"链表算法 判断链表是否有环 定义一个临时变量引用指向当前的节点 定义一个 hashmap。Key 与 value 当时当前的节点。 该节点存在于 hashmap 中，node.get(tmp) ，则确定有环， 没有就存放该的节点。 单链表反转 从当前链表的首节点开始循环遍历，一直到链表的最后一个节点，会逐个改变所遍历的节点的指针域，另其指向前一个节点。 具体","category":["algo"],"tag":["algo"]},["/algo/linked-list-determines-that-there-is-a-cycle-recursive-inversion","/algo/linked-list-determines-that-there-is-a-cycle-recursive-inversion.md"]],
  ["v-d040d952","/algo/maximum-depth-of-a-binary-tree.html",{"title":"maximum-depth-of-a-binary-tree","icon":"algo","type":"article","readingTime":{"minutes":2.77,"words":830},"excerpt":"二叉树的最大深度 给定一个二叉树，找出其最大深度。 二叉树的深度为根节点到最远叶子节点的路径上的节点数。 说明: 叶子节点是指没有子节点的节点。 返回它的最大深度 3 。 解题思路： 要求二叉树的最大深度，我们可以先求出左子树和右子树的深度 l 和 r 那就可以计算出二叉树的最大深度了：max( l,r )+1 而左子树和右子树的最大深度又可以以同样的方式进","date":"2022-04-13T18:37:08.000Z","category":["algo"],"tag":["algo"]},["/algo/maximum-depth-of-a-binary-tree","/algo/maximum-depth-of-a-binary-tree.md"]],
  ["v-144c90e3","/algo/",{"title":"algorithm-content","icon":"algo","type":"article","readingTime":{"minutes":0.21,"words":63},"excerpt":"算法目录\r二叉树的最大深度; \r八种排序算法总结; \r算法-八皇后; \r链表判断有环、递归反转;","date":"2022-04-13T01:38:50.000Z","category":["algo"],"tag":["algo"]},["/algo/index.html","/algo/README.md"]],
  ["v-4e1d84bc","/algo/summary-of-eight-sorting-algorithms.html",{"title":"8sort-algo","icon":"sort","type":"article","readingTime":{"minutes":8.72,"words":2616},"excerpt":"8sort-algo\r\" 原地排序：是否使用了利用辅助的空间。\"\r\" 稳定排序：数列值相等的元素排序后相对顺序不变\" 堆排序(不稳定,原地) 思路 1）数组构建成二叉堆。(小到大排序,则构建最大堆)； 2）循环删除堆顶元素,替换到二叉堆的末尾,调整堆产生新的堆顶。 代码 快速排序 快速排序是一种原地排序,只需要一个很小的栈作为辅助空间,空间复杂度为 O(lo","date":"2022-04-13T18:37:08.000Z","category":["algo"],"tag":["algo","sort"]},["/algo/summary-of-eight-sorting-algorithms","/algo/summary-of-eight-sorting-algorithms.md"]],
  ["v-148a4c97","/exam/",{"title":"exam","icon":"note","type":"article","readingTime":{"minutes":0.02,"words":6},"excerpt":"生活 随笔 生活","date":"2022-04-13T01:38:50.000Z","category":["note"]},["/exam/index.html","/exam/readme.md"]],
  ["v-729d72de","/exam/T-shaped_talents.html",{"title":"","type":"article","readingTime":{"minutes":0.3,"words":90},"excerpt":"提问的智慧 不要说大家有没有遇到这种问题，而是 自己在什么场景（时间、环境）做了什么事儿，我希望的结果是？但是目前出现的结果又是，异常栈信息如下。 找对相应的负责人，分工合作，不要自己一个人扛着。 把问题讲清楚","date":"2022-04-13T01:38:50.000Z"},["/exam/T-shaped_talents","/exam/T-shaped_talents.md"]],
  ["v-aeead028","/java/interview.html",{"title":"interview technique","type":"article","readingTime":{"minutes":17.16,"words":5148},"excerpt":"interview 1. 自动说出自己匹配该职位的要点，比如项目时长够，所用技术匹配，别等提问者提问。 2. 面试前不仅要准备八股文，更要多准备亮点，面试中尽可能地通过抛出亮点来引导提问者提问，尽量压缩提问者的提问空间。 3. 语气神态不亢不卑，甚至故意示弱，比如某些问题想下再回答，或故意抛出些小问题，等提问者提问后再澄清。总之别让提问者感觉你事先准备过。 ","date":"2022-01-01T00:00:00.000Z","tag":["interview"]},["/java/interview","/java/interview.md"]],
  ["v-14c69af4","/java/",{"title":"java","icon":"mulu","type":"article","readingTime":{"minutes":0.17,"words":50},"excerpt":"java目录\r算法; \r并发; \r数据库; \r虚拟机; \r消息队列; \r缓存; \rspring 框架; \r微服务、springCloud、Dubbo、前后端分离;","date":"2022-04-13T01:38:50.000Z","category":["目录"]},["/java/index.html","/java/readme.md"]],
  ["v-6512cb71","/java/xxl-job.html",{"title":"","type":"article","readingTime":{"minutes":0.25,"words":75},"excerpt":"大众点评：这是一个分布式轻量级的任务调度框架，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。 xxl-job 通过一个中心式的调度平台，调度多个执行器执行任务，调度中心通过DB","date":"2022-04-13T01:38:50.000Z"},["/java/xxl-job","/java/xxl-job.md"]],
  ["v-e403bc4e","/note/60-famous-principles-and-theorems.html",{"title":"60-famous-principles-and-theorems","type":"article","readingTime":{"minutes":14.64,"words":4391},"excerpt":"60条有名的原则与定理 1、蓝斯登原则：在你往上爬的时候，一定要保持梯子的整洁，否则你下来时可能会滑倒。 提出者：美国管理学家蓝斯登。 点评：进退有度，才不至进退维谷；宠辱皆忘，方可以宠辱不惊。 2、卢维斯定理：谦虚不是把自己想得很糟，而是完全不想自己。 提出者：美国心理学家卢维斯 点评：如果把自己想得太好，就很容易将别人想得很糟。 3、托利得定理：测验一个","date":"2022-04-13T18:37:08.000Z","category":["expierence"],"tag":["expierence"]},["/note/60-famous-principles-and-theorems","/note/60-famous-principles-and-theorems.md"]],
  ["v-624c112b","/note/a_little_experience_of_exporting_tens_of_millions_of_data_to_excel.html",{"title":"be-a-critical-thinking-programmer","type":"article","readingTime":{"minutes":3.7,"words":1110},"excerpt":"千万级的数据用 EXCEL 导出 最近做了个项目,使用 MYSQL 数据库,要求做到千万级的数据用 EXCEL 导出,试了良久,找出了几个方法. 问题 JAVA 实现大数据量导出操作时，如果采用 POI 直接导出，会出现内存溢出的情况。再者 EXCEL 的 SHEET 也存在行数的限制，Excel2003 版最大行数是 655536 行、Excel2007 ","date":"2022-04-13T18:37:08.000Z","category":["note"],"tag":["note"]},["/note/a_little_experience_of_exporting_tens_of_millions_of_data_to_excel","/note/a_little_experience_of_exporting_tens_of_millions_of_data_to_excel.md"]],
  ["v-681d5ed8","/note/a_null_pointer_exception-therearesomanytricks.html",{"title":"a_null_pointer_exception,therearesomanytricks!","type":"article","readingTime":{"minutes":1.07,"words":322},"excerpt":"一个 NullPointerException ，竟然有这么多花样！ 敢问各位大佬，在使用spring 的缓存注解@Cacheable 时，缓存配置的时redis，客户端Jedis ,生产时单点，线上是否碰到过随机的空指针异常，有spring的RedisCache在get时抛出的； 这里就涉及到一个重要的问题，那就是提问的艺术 比如说：我们常见的错误提问方式","author":"Felix zyf","date":"2018-02-04T00:00:00.000Z","category":["note"]},["/note/a_null_pointer_exception-therearesomanytricks","/note/a_null_pointer_exception-therearesomanytricks.md"]],
  ["v-5e1ec97c","/note/be-a-critical-thinking-programmer.html",{"title":"critical thinking","type":"article","readingTime":{"minutes":12.81,"words":3844},"excerpt":"做一个有批判性思维的程序员！\r\"作为一名程序员，我也喜欢对自己和别人的代码进行批判，为什么要这样写，这个注解有什么用、有没有更好的实现方式等等。对自己写的每一行代码、用到的每一个工具类，都要理解，不然不知道这个工具类都做了什么，怎么敢保证用了之后不会带来Bug？\" 好的游戏一定要让玩家玩的很爽吗？王者荣耀和吃鸡游戏的成功，让这个问题的答案似乎毫无争议，不能带","author":"SexyCode","date":"2018-02-04T00:00:00.000Z","category":["note"]},["/note/be-a-critical-thinking-programmer","/note/be-a-critical-thinking-programmer.md"]],
  ["v-216af46a","/note/change-your-nickname-and-talk-nonsense.html",{"title":"","type":"article","readingTime":{"minutes":3.67,"words":1102},"excerpt":"Change your nickname and talk nonsense 看到猪头改昵称了，我忽然想起，几个月前就要改昵称，现在却还没有实施。 其实很早就在群里改网名了，不过在 csdn 上却迟迟没有改。 某人说，名字只是一个代号而已，叫阿猫阿狗都一样。 我却不这样认为，一个人名字大约一定带着点含义或者意义的。 就像一个人自己的本名一样，虽然可能你没有对","date":"2022-04-13T18:37:08.000Z"},["/note/change-your-nickname-and-talk-nonsense","/note/change-your-nickname-and-talk-nonsense.md"]],
  ["v-715338ad","/note/how-can-programmers-not-take-a-fork.html",{"title":"how-programmers-do-not-go-astray-in-their-busy-schedules","icon":"note","type":"article","readingTime":{"minutes":9.37,"words":2812},"excerpt":"程序员如何在百忙之中不走岔路，不白忙! 程序员忙，似乎是个公论，有些程序员甚至会认为，不忙的程序员无法快速地进步，从而会落伍。或者说，不忙的程序员有可能被公司末尾淘汰掉。对此，一直危机感很重的我深以为然。 因为，我见过不少得过且过的的程序员工资明显低于同等条件下的平均水平，我更见过更多忙成狗的程序员，因为不知道在忙什么以及为什么忙，所以进步很慢，这真就叫做白","date":"2022-04-13T18:37:08.000Z","category":["personal-planning"]},["/note/how-can-programmers-not-take-a-fork","/note/how-can-programmers-not-take-a-fork.md"]],
  ["v-072aaa72","/note/how-to-write-daily-report.html",{"title":"daily report","type":"article","readingTime":{"minutes":5.19,"words":1558},"excerpt":"01 多使用序号，每行尽量精简 一些PM的日报为了描述上的完整性，喜欢用大段的文字去阐述一件事情。 但其实人是会有视觉疲劳的，大家如果看到大段的文字，就不太会仔细地阅读了，非常容易错过重点信息。 所以我一般会把大段的文字进行拆分，用1、2、3来标注区分，同时对内容进行筛减，提炼重点话术。我给大家举个例子： A：今天一共评审了10个模块，其中5个模块顺利通过，","date":"2022-04-13T18:37:08.000Z"},["/note/how-to-write-daily-report","/note/how-to-write-daily-report.md"]],
  ["v-1ffc54e4","/note/humorous-jokes.html",{"title":"humorous","type":"article","readingTime":{"minutes":0.68,"words":204},"excerpt":"搞学术的为什么都睡得那么晚，难道只有到晚上才有灵感？不是，姑娘，搞学术不靠灵感，靠的是碌碌无为的白天引发的愧疚心。 单身程序狗解决了一个技术难题后没有妹子可以炫耀或夸一下自己怎么办？ 现在你明白了吧，为什么那么多程序员要写技术博客。 “玩算法的码农，打拼靠蓝条，像是法师。数学就等于蓝条最大值，数学差，魔法值不高，很快就到瓶颈了。外语影响回蓝速度。经验和智力加"},["/note/humorous-jokes","/note/humorous-jokes.md"]],
  ["v-0dc6aa60","/note/in-your-spare-time-please-don't-take-personal-work-but-improve-yourself.html",{"title":"","type":"article","readingTime":{"minutes":3.57,"words":1072},"excerpt":"这个话题很纠结 现在社会，有很多人都在利用个人时间兼职赚钱，程序员俗称“接私活”，其他行业称作兼职，比如下了班出去跑滴滴，周末兼职抢单送外卖等等，都是普通人很常见的兼职方式。 甚至很多技术同行，我听说也有周末去跑滴滴和送外卖的，我觉得很不可思议，然而我的观点是如果你想成为成功人士，高收入人群那么你不应该去做兼职，不要把你宝贵的时间，浪费在兼职上。 简单经济学"},["/note/in-your-spare-time-please-don't-take-personal-work-but-improve-yourself","/note/in-your-spare-time-please-don't-take-personal-work-but-improve-yourself.md"]],
  ["v-4d96bc54","/note/killing-a-programmer-doesnt-require-a-gun-just-change-the-requirements-three-times.html",{"title":"","type":"article","readingTime":{"minutes":8.77,"words":2632},"excerpt":"在很多软件公司，特别是一些创业型的团队中，对于这样的情景可能大家都很熟悉：项目经理或者产品经理（产品狗）口头或者简单记录一下软件产品的大致要做的功能，直接就让研发团队的兄弟（程序猿）去狂撸代码。然后他就去喝茶撩妹或者回家陪老婆了... 这种撸起袖子就开干的方式，看似简单高效，便于直接沟通，能够快速迭代。却不知，发现没有一份正规且实时更新的功能需求设计文档，会","date":"2022-04-13T18:37:08.000Z"},["/note/killing-a-programmer-doesnt-require-a-gun-just-change-the-requirements-three-times","/note/killing-a-programmer-doesnt-require-a-gun-just-change-the-requirements-three-times.md"]],
  ["v-1f6bce85","/note/life-notes.html",{"title":"","type":"article","readingTime":{"minutes":0.22,"words":66},"excerpt":"2022 年在京的第一个元旦 深藏金华京府地， 浅抹银妆天子城。 缕缕冬阳生暖意， 片片霓虹庆喜辰。 挥断愁丝付流年， 洗净欢颜听钟声。 新年新境新气象， 好人好运好前程。","date":"2022-04-13T18:37:08.000Z"},["/note/life-notes","/note/life-notes.md"]],
  ["v-0bef6e26","/note/rapid-growth-as-a-technologist.html",{"title":"rapid-growth-as-a-technologist","type":"article","readingTime":{"minutes":6.12,"words":1835},"excerpt":"《阿里感悟》如何在三年内成长为一名技术专家 工作前三年是职业生涯中成长最快的几年，在这段时间里你会充满激情，做事专注，也容易养成良好的习惯。 在我们公司有些同学在前三年中就快速成为某一个领域的技术专家，有些同学也可能止步不前。本文和大家一起探讨下如何在三年内快速成长为一名技术专家。 rapid-growth-as-a-technologist 学习方法 1：","date":"2017-09-16T00:00:00.000Z","category":["note"]},["/note/rapid-growth-as-a-technologist","/note/rapid-growth-as-a-technologist.md"]],
  ["v-15054f24","/note/",{"title":"note","icon":"note","type":"article","readingTime":{"minutes":0.27,"words":82},"excerpt":"note\r做一个有批判性思维的程序员; \r如何在三年内成长为一名技术专家; \r60条有名的原则与定理; \r一个NullPointerException，竟然有这么多花样！; \r还在使用SimpleDateFormat？你的项目崩没？;","date":"2022-04-13T01:38:50.000Z","category":["note"]},["/note/index.html","/note/readme.md"]],
  ["v-7f2a290c","/note/still-using-simple-date-format.html",{"title":"SimpleDateFormat","type":"article","readingTime":{"minutes":4.19,"words":1257},"excerpt":"一、前言 日常开发中，我们经常需要使用时间相关类，说到时间相关类，想必大家对SimpleDateFormat并不陌生。主要是用它进行时间的格式化输出和解析，挺方便快捷的，但是SimpleDateFormat并不是一个线程安全的类。在多线程情况下，会出现异常，想必有经验的小伙伴也遇到过。下面我们就来分析分析SimpleDateFormat为什么不安全？是怎么引","author":"Felix zyf","date":"2018-02-04T00:00:00.000Z","category":["note"]},["/note/still-using-simple-date-format","/note/still-using-simple-date-format.md"]],
  ["v-eb891fd0","/tool/api-development-debugging-artifact-apipost.html",{"title":"","type":"article","readingTime":{"minutes":1.62,"words":486},"excerpt":"这几天看到大疆被UI设计工具Figma列入黑名单，再次证明科技无国界什么的都是屁话，国产软件必须在各个领域出击，才能不用看人脸色。 在API管理领域，大家长期使用的是Postman，但是这终究不保险，万一哪天外国又卡脖子，我们又要手忙脚乱。好在国产Api管理软件这几年进展神速，比如Apipost，不止功能不输国外，而且在体验上，更适合中国程序员。 而且最近，","date":"2022-04-13T18:37:08.000Z"},["/tool/api-development-debugging-artifact-apipost","/tool/api-development-debugging-artifact-apipost.md"]],
  ["v-6538ac8a","/tool/docker.html",{"title":"docker","icon":"Docker","type":"article","readingTime":{"minutes":3.05,"words":914},"excerpt":"Docker 是一个软件容器化平台，它以容器的形式将您的应用程序及其所有依赖项打包在一起，以确保你的应用程序在任何环境中无缝运行。 Docker 容器包括应用程序及其所有依赖项，作为操作系统的独立进程运行。 Docker 镜像是 Docker 容器的源代码，Docker 镜像用于创建容器。使用 build 命令创建镜像。 Docker 容器有几种状态 四种状","date":"2022-04-13T01:38:50.000Z","category":["tool"],"tag":["docker"]},["/tool/docker","/tool/docker.md"]],
  ["v-49951ef6","/tool/git.html",{"title":"git-use","icon":"git","type":"article","readingTime":{"minutes":2.76,"words":829},"excerpt":"git对于大家应该都不太陌生，熟练使用git已经成为程序员的一项基本技能，尽管在工作中有诸如 Sourcetree这样牛X的客户端工具，使得合并代码变的很方便。但找工作面试和一些需彰显个人实力的场景，仍然需要我们掌握足够多的git命令。 git add&git stage区别 在回答这个问题之前需要先了解 git 仓库的三个组成部分：工作区(Working ","date":"2022-04-13T01:38:50.000Z","category":["tool"],"tag":["git"]},["/tool/git","/tool/git.md"]],
  ["v-7d597dee","/tool/idea-plugin.html",{"title":"easy-to-use-idea-plugins-and-configurations","type":"article","readingTime":{"minutes":0.5,"words":150},"excerpt":"好用的idea插件 1. Alibaba Java Coding Guidelines 2. iBATIS/MyBatis plugin 3. GsonFormat 4. Stack Overflow 5. Background Image Plus 6. Lombok 7. CodeGlance 8. generatAllSetter 9. gitee 1","date":"2022-04-13T18:37:08.000Z","category":["tool"]},["/tool/idea-plugin","/tool/idea-plugin.md"]],
  ["v-58f3f3f1","/tool/k8s.html",{"title":"kubernetes","icon":"kubernetes","type":"article","readingTime":{"minutes":0.67,"words":202},"excerpt":"介绍 Docker 提供容器的生命周期管理，Docker 镜像构建运行时容器。 但是，由于这些单独的容器必须通信，因此使用 Kubernetes。因此，我们说 Docker 构建容器，这些容器通过 Kubernetes 相互通信。因此，可以使用 Kubernetes 手动关联和编排在多个主机上运行的容器。 Container Orchestration 一个","date":"2022-04-13T01:38:50.000Z","category":["tool"],"tag":["kubernetes"]},["/tool/k8s","/tool/k8s.md"]],
  ["v-1559ca3e","/tool/",{"title":"tool-content","icon":"mulu","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"工具目录\rgi; \rk8s; \rdocker; \r代码注释; \ridea插件; \rAPI开发调式神器Apipost;","date":"2022-04-13T01:38:50.000Z","category":["目录"],"sticky":3,"star":9},["/tool/index.html","/tool/readme.md"]],
  ["v-3f601c7a","/tool/tool.html",{"title":"code note","icon":"note","type":"article","readingTime":{"minutes":0.15,"words":45},"excerpt":"代码注释中经常用到的 TODO、XXX、FIXME 有什么区别? 1. TODO 等待实现的功能 2. FIXME 需要修正的功能 3. XXX 需要改进的功能","date":"2022-04-13T01:38:50.000Z","category":["tool"],"tag":["注释"]},["/tool/tool","/tool/tool.md"]],
  ["v-9b52565e","/vue/frequently-asked-questions.html",{"title":"vuequestion","icon":"Vue","type":"article","readingTime":{"minutes":3.97,"words":1192},"excerpt":"vue 常见问题 SPA 单页应用 仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。 一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转，利用路由机制实现 HTML 内容的变换来代替，UI 与用户的交互，避免页面的重新加载。 用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；","date":"2022-04-13T18:37:08.000Z","category":["js"],"tag":["vue"]},["/vue/frequently-asked-questions","/vue/frequently-asked-questions.md"]],
  ["v-e203a226","/vue/instruction.html",{"title":"vue directives","icon":"Vue","type":"article","readingTime":{"minutes":1.08,"words":324},"excerpt":"directives 表格临时回车跳转 浅拷贝 ： 只是将数据中所有的数据引用下来，依旧指向同一个存放地址，拷贝之后的数据修改之后，也会影响到原数据的中的对象数据。例如:Object.assign(),...扩展运算符 深拷贝： 将数据中所有的数据拷贝下来，对拷贝之后的数据进行修改不会影响到原数据。 JSON.parse(JSON.stringify(obj","date":"2022-04-13T18:37:08.000Z","category":["js"],"tag":["vue"]},["/vue/instruction","/vue/instruction.md"]],
  ["v-744e35e2","/vue/",{"title":"frontend-content","icon":"WEBqianduan","type":"article","readingTime":{"minutes":0.09,"words":26},"excerpt":"前端目录\rTypescript; \rvue知识点1; \rvue知识点2; \rvue指令;","date":"2022-04-13T01:38:50.000Z","category":["目录"],"tag":["目录"],"sticky":2,"star":9},["/vue/index.html","/vue/readme.md"]],
  ["v-f37efd9c","/vue/Typescript.html",{"title":"Typescript","icon":"typescript","type":"article","readingTime":{"minutes":1.28,"words":384},"excerpt":"TypeScript\r介绍 TypeScript 是强类型的 JavaScript 超集，支持 ES6 语法，支持面向对象编程的概念，如类、接口、继承、泛型等。 TypeScript 并不直接在浏览器上运行，需要编译器编译成纯 JavaScript 来运行。 支持泛型，es6 语法，强类型和静态类型 1：快速简单，易于学习。 2：编译时提供错误检查， 在代码","date":"2022-04-13T01:38:50.000Z","category":["js"],"tag":["Typescript"]},["/vue/Typescript","/vue/Typescript.md"]],
  ["v-13cf025e","/vue/vue-knowledge-points.html",{"title":"es6","icon":"Vue","type":"article","readingTime":{"minutes":2.84,"words":851},"excerpt":"es6 一种通过重用组件构建类的方法。 不通过类的直接继承来实现，而是将基类作为接口来实现。对于基类实例化部分在子类中实现，基类中原型的部分在子类中进行声明占位，然后通过一个 Minxin 函数将基类上的原型属性拷贝到子类上。 promise 用来处理异步任务的一个对象，一个 Promise 对象有三个状态，resolved 异步任务执行成功，rejecte","date":"2021-09-20T00:00:00.000Z","category":["js"],"tag":["es6"]},["/vue/vue-knowledge-points","/vue/vue-knowledge-points.md"]],
  ["v-0d1b27be","/exam/capability/expression.html",{"title":"","type":"article","readingTime":{"minutes":1.44,"words":433},"excerpt":"every day 10 min 每天 10 分钟快速提升表达能力 ‼️ 简单初学版-保姆级别教程 笔记 表达遵循二八定律，百分之八十的废话讲得让人想听 + 百分之二十的核心内容 一共四周 第一周:建立自信 大声夸张地朗读古诗，千万不要重复，一口气读完，七天不重样 《满江红》《长歌行》《雨霖铃》《沁园春雪》《岳阳楼记》《将进酒》《蜀道难》 第二周:提升反应&","date":"2022-04-13T01:38:50.000Z"},["/exam/capability/expression","/exam/capability/expression.md"]],
  ["v-2b3004d2","/exam/capability/Introduce%20a%20way%20of%20thinking.html",{"title":"","type":"article","readingTime":{"minutes":0.37,"words":111},"excerpt":"引出问题 [【硬核干货】介绍一个吊炸天的思维方式！不用谢！ ](https://www.bilibili.com/video/BV1cZ4y1M7t8/?spmidfrom=333.788.recommendmorevideo.0) 多刷知乎，回答问题， 考虑你的答案，让他们更有逻辑，更有价值，别人能够听懂，废话很多不重要，80%的废话+20%的核心内容会让","date":"2022-04-13T18:37:08.000Z"},["/exam/capability/Introduce a way of thinking.html","/exam/capability/Introduce%20a%20way%20of%20thinking","/exam/capability/Introduce a way of thinking.md","/exam/capability/Introduce%20a%20way%20of%20thinking.md"]],
  ["v-11f1860c","/exam/med/",{"title":"med business","type":"article","readingTime":{"minutes":1.1,"words":330},"excerpt":"med 手工报销初审(上传) 数据来源 1. 补录 2. 院端上传 3. 门诊实时结算未分解 注：院端上传 补支、追回 后期审核发现中心报销费用异常，需要追回已审核支付的数据。操作员可在已经结算支付的单位手工报销交易上增加现金追回记录功能。 (1) 经办人员根据条件查询需要追回的报销信息； (2) 对结算信息进行追回处理。 1.1.1.15.3 界面设计 (","date":"2022-04-13T01:38:50.000Z","category":["business"],"tag":["医保业务"]},["/exam/med/index.html","/exam/med/readme.md"]],
  ["v-0e83f4e1","/exam/med/Summary%20of%20problems%20encountered.html",{"title":"","type":"article","readingTime":{"minutes":0.42,"words":126},"excerpt":"医院上传 实时未分解交易 未支付成功的票据 xx 补录 Xx 比对失败 Xx 比对失败的票据，怎么处理， 票据文件上传是只用于上传模块？ 用ctrl+r进行内容替换，使用正则表达式，用^\\s*\\n 替换 空即可 \\s 包括空格、制表符、换页符等空白字符的其中任意一个 \\r, \\n 代表回车和换行符\r表达式不出现或出现任意次，相当于 {0,}，;","date":"2022-04-13T18:37:08.000Z"},["/exam/med/Summary of problems encountered.html","/exam/med/Summary%20of%20problems%20encountered","/exam/med/Summary of problems encountered.md","/exam/med/Summary%20of%20problems%20encountered.md"]],
  ["v-cf2750d2","/exam/med/%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":"","date":"2022-04-13T01:38:50.000Z"},["/exam/med/测试数据.html","/exam/med/%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE","/exam/med/测试数据.md","/exam/med/%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE.md"]],
  ["v-18147fd6","/exam/trouble/hosts%E6%96%87%E4%BB%B6%E4%BD%9C%E7%94%A8.html",{"title":"","type":"article","readingTime":{"minutes":4.45,"words":1335},"excerpt":"hosts 文件是一个没有扩展名的系统文件，可以用记事本等工具打开，作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。 Hosts文件配置","date":"2022-04-13T01:38:50.000Z"},["/exam/trouble/hosts文件作用.html","/exam/trouble/hosts%E6%96%87%E4%BB%B6%E4%BD%9C%E7%94%A8","/exam/trouble/hosts文件作用.md","/exam/trouble/hosts%E6%96%87%E4%BB%B6%E4%BD%9C%E7%94%A8.md"]],
  ["v-19282328","/exam/trouble/problem%20log.html",{"title":"","type":"article","readingTime":{"minutes":0.42,"words":126},"excerpt":"启动项目报错 Error:java: OutOfMemoryError: insufficient memory idea 修改Compiler下面的Compiler Process heap size 参数 点击file，选择Invalidate Caches 进行清理一下。 Idea运行报错Error running ‘Application‘: Com","date":"2022-04-13T18:37:08.000Z"},["/exam/trouble/problem log.html","/exam/trouble/problem%20log","/exam/trouble/problem log.md","/exam/trouble/problem%20log.md"]],
  ["v-7460244e","/exam/wcyg/topic-is-new-age.html",{"title":"new-age","icon":"autumn","type":"article","readingTime":{"minutes":2.17,"words":651},"excerpt":"\"today's topic is 'new age'\" ------愚人记事.\r昨夜无眠。 和朋友鬼扯到一点。 找资料间,无意听到背景音乐是enya的。 一时下不了手关闭. 听着enya的音乐到凌晨五点才沉沉睡去. 几年了, 除却sarah的scabrough fair外, 我的硬盘再也没存有任何 new age style 的任何曲目, 特别是enya相","date":"2021-08-18T00:00:00.000Z","category":["随笔"],"tag":["如是我思"]},["/exam/wcyg/topic-is-new-age","/exam/wcyg/topic-is-new-age.md"]],
  ["v-16c0de22","/exam/yanyu/new%20recruit.html",{"title":"","type":"article","readingTime":{"minutes":4.63,"words":1388},"excerpt":"新人入职注意事项 新人java 入职新公司一脸懵逼，不知从何下手，不知如何融入项目，也不知道如何看项目问题 我这几年待过一些公司，最近入职了一下新公司，闲来没事，发现网上有很多小白去新公司，不知从何下手，导致劝退，或者很慌的。 说说我的一些建议和一些个人经验吧 项目都不知道是干什么的，千万不要一开始就选择看代码看技术，项目的技术往往是结合业务相关联的 1. ","date":"2022-04-13T18:37:08.000Z"},["/exam/yanyu/new recruit.html","/exam/yanyu/new%20recruit","/exam/yanyu/new recruit.md","/exam/yanyu/new%20recruit.md"]],
  ["v-66735fc4","/exam/yanyu/",{"title":"yanyu","type":"article","readingTime":{"minutes":4.34,"words":1301},"excerpt":"yanyulijie 言语理解与表达方法 第三次学习重点内容 ① 中心理解题中心句及分述句的特征 ② 细节判断题解题思维及错误选项特征 第一、二节回顾 行文脉络 1. 总分 2. 分总 3. 总分总 4. 分总分 5. 分分 理论要点：把握中心句及分述句的特征 中心句特征 观点(对策、结论、评论) 1. 背景问题，提出对策 2. 背景问题，提出结论 3. 背","date":"2022-04-13T01:38:50.000Z","category":["expierence"],"tag":["expierence"]},["/exam/yanyu/index.html","/exam/yanyu/readme.md"]],
  ["v-f77b6196","/exam/yanyu/Thread%20Safety%20and%20Lock%20Synchronized.html",{"title":"","type":"article","readingTime":{"minutes":2.47,"words":742},"excerpt":"Java多线程编程-（1）-线程安全和锁Synchronized概念 1 进程与线程的概念 （1）在传统的操作系统中，程序并不能独立运行，作为资源分配和独立运行的基本单位都是进程。 在未配置 OS 的系统中，程序的执行方式是顺序执行，即必须在一个程序执行完后，才允许另一个程序执行；在多道程序环境下，则允许多个程序并发执行。程序的这两种执行方式间有着显著的不同","date":"2022-04-13T18:37:08.000Z"},["/exam/yanyu/Thread Safety and Lock Synchronized.html","/exam/yanyu/Thread%20Safety%20and%20Lock%20Synchronized","/exam/yanyu/Thread Safety and Lock Synchronized.md","/exam/yanyu/Thread%20Safety%20and%20Lock%20Synchronized.md"]],
  ["v-e53b626e","/exam/yewu/medical-insurance.html",{"title":"","type":"article","readingTime":{"minutes":3.48,"words":1043},"excerpt":"yewu 正常的业务 08.0 3 到 03.19北京新医保核心业务的开发， 负责业务模块 手工报销结算模块： 票据扫描，票据文件报盘导入，提供两定接口，院端自费信息上传接口，院端上传的自费信息进行预结算，结算；添加相应的规则校验；手工报销费用补支、追回及其审核发财务； 手工报销结算模块(医照人员)模块：单位报盘自费信息导入，数据审核，补支、追回及其审核模块"},["/exam/yewu/medical-insurance","/exam/yewu/medical-insurance.md"]],
  ["v-59513c7a","/exam/yewu/Transfer%20triggers%20data%20consistency%20thinking.html",{"title":"zhuanzhang","icon":"fubuhi","type":"article","readingTime":{"minutes":4.84,"words":1451},"excerpt":"转账引发的一致性思考 A 账户给 B 账户转账 100 元(A、B 处于同一个库中)， 如果 A 的账户发生扣款，B 的账户却没有到账，这就出现了数据的不一致！ 为了保证数据的一致性，数据库的事务机制会让 A 账户扣款和 B 在账户到账的两个操作要么同时成功，如果有一个操作失败，则多个操作同时回滚，这就是事务的原子性，为了保证事务操作的原子性，就必须实现基于","date":"2021-11-21T00:00:00.000Z","category":["fubuhi"],"tag":["cap","fubushi"]},["/exam/yewu/Transfer triggers data consistency thinking.html","/exam/yewu/Transfer%20triggers%20data%20consistency%20thinking","/exam/yewu/Transfer triggers data consistency thinking.md","/exam/yewu/Transfer%20triggers%20data%20consistency%20thinking.md"]],
  ["v-3acc7380","/java/basic/hashmap.html",{"title":"hashmap","icon":"hashmap","type":"article","readingTime":{"minutes":12.46,"words":3737},"excerpt":"HASHMAP的内部结构（线程不安全、基于JDK7） hashmap是无序的，因为每次根据 key 的 hashcode 映射到 Entry 数组上，所以遍历出来的顺序并不是写入的顺序。 HSAHMAP底层是基于数组和链表实现的，两个重要的参数：容量和负载因子；容量的默认大小的16，负载因子是0.75，当HashMap的size>16*0.75时就会发生扩容","date":"2022-04-13T01:38:50.000Z","category":["java"],"tag":["集合","java"]},["/java/basic/hashmap","/java/basic/hashmap.md"]],
  ["v-43c1b120","/java/basic/java-exception.html",{"title":"exception","icon":"exception","type":"article","readingTime":{"minutes":2.3,"words":690},"excerpt":"图中红色部分为受检查异常。它们必须被捕获，或者在函数中声明为抛出该异常。 检查型异常(CheckedException) 在 Java 中所有不是 RuntimeException 派生的 Exception 都是检查型异常。 当函数中存在抛出检查型异常的操作时该函数的函数声明中必须包含 throws 语句。调用改函数的函数也必须对该异常进行处理，如不进行处","date":"2022-04-13T18:37:08.000Z","category":["java"],"tag":["java"]},["/java/basic/java-exception","/java/basic/java-exception.md"]],
  ["v-6fe69d32","/java/basic/jdk%208%20new%20features.html",{"title":"","type":"article","readingTime":{"minutes":0.02,"words":7},"excerpt":"Java 8特性 - Collectors toMap tomap","date":"2022-04-13T18:37:08.000Z"},["/java/basic/jdk 8 new features.html","/java/basic/jdk%208%20new%20features","/java/basic/jdk 8 new features.md","/java/basic/jdk%208%20new%20features.md"]],
  ["v-ffb97496","/java/basic/",{"title":"basic mulu","icon":"mulu","type":"article","readingTime":{"minutes":0.04,"words":12},"excerpt":"java基础目录\rhashmap; \rjava异常;","date":"2022-04-13T01:38:50.000Z","category":["目录"]},["/java/basic/index.html","/java/basic/readme.md"]],
  ["v-418cb1ee","/java/basic/String%20optimization%20processing%20for%20Java%20performance%20optimization.html",{"title":"string","icon":"string","type":"article","readingTime":{"minutes":2.19,"words":658},"excerpt":"Java性能优化之字符串优化处理 string对象 String对象时JAVA中重要的数据类型，在大部分情况下我们都会用到String对象。 String s = new String(\"111 \")会创建几个对象？ String不可变吗？ 有的人会认为上面这段代码应该输出：111 这样才和上面的不变性吻合。 哈哈哈，但是并不是这样滴。 222 这不对呀，不","date":"2022-04-13T18:37:08.000Z","category":["java"],"tag":["string"]},["/java/basic/String optimization processing for Java performance optimization.html","/java/basic/String%20optimization%20processing%20for%20Java%20performance%20optimization","/java/basic/String optimization processing for Java performance optimization.md","/java/basic/String%20optimization%20processing%20for%20Java%20performance%20optimization.md"]],
  ["v-b6468a94","/java/basic/the-difference-between-hashcode-and-equals.html",{"title":"","type":"article","readingTime":{"minutes":3.43,"words":1029},"excerpt":"解释Serializable 接口的作用 在JAVA中的这个Serializable是给JVM看的，告诉JVM，代码不做这个类的序列化了，JVM给我序列化，序列化就是变成二进制流，例如云计算、HADOOP、特别是Hadoop完全就是分布式环境，那么就是涉及到对象要在网络中传输，里面的全是二进制流，当然你来做着这个序列化操作也可以，但是这个类里面可能还有一个类","date":"2022-04-13T18:37:08.000Z"},["/java/basic/the-difference-between-hashcode-and-equals","/java/basic/the-difference-between-hashcode-and-equals.md"]],
  ["v-acd622c2","/java/concurrent/4-reference-types.html",{"title":"4-reference-types","type":"article","readingTime":{"minutes":1.86,"words":558},"excerpt":"四种引用类型 强引用 强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾收集器绝不会回收它。 但是如果这个strong-reference是全局变量时，就需要在不用这个对象时赋值为null，因为强引用不会被垃圾回收。 例如：ArrayList的 Clear方法： 在ArrayList类中定义了一个elementData数组，在调用clear方法清空数组","date":"2022-04-13T01:38:50.000Z","category":["concurrent"],"tag":["concurrent"]},["/java/concurrent/4-reference-types","/java/concurrent/4-reference-types.md"]],
  ["v-0fda94b0","/java/concurrent/AQS&ReentrantLock.html",{"title":"brief-analysis-of-queue-synchronizer-aqs-and-reentrantlock-lock-principles","type":"article","readingTime":{"minutes":1.63,"words":490},"excerpt":"Java多线程编程-（14）-Java 中的队列同步器AQS和ReentrantLock锁原理简要分析 一、Lock接口 在上一篇文章中：Java多线程编程-（5 ）-使用Lock对象实现同步以及线程间通信介绍了如何使用Lock实现和synchronized关键字类似的同步功能，只是Lock在使用时需要显式地获取和释放锁，synchronized实现的隐式的","date":"2022-04-13T18:37:08.000Z","category":["concurrent"],"tag":["concurrent"]},["/java/concurrent/AQS&ReentrantLock","/java/concurrent/AQS&ReentrantLock.md"]],
  ["v-c82fcb16","/java/concurrent/aqs-source-code-reading-notes.html",{"title":"AbstractQueuedSynchronizer","type":"article","readingTime":{"minutes":3.68,"words":1103},"excerpt":"AQS 概述 AbstractQueuedSynchronizer，是 JDK 提供的一个同步框架，内部维护着 FIFO 双向队列，即 CLH 同步队列。 AQS 依赖它来完成同步状态的管理(voliate 修饰的 state，用于标志是否持有锁)。如果获取同步状态 state 失败时，会将当前线程及等待信息等构建成一个 Node，将 Node.js 放到 ","date":"2022-04-13T01:38:50.000Z","category":["concurrent"],"tag":["concurrent","aqs"]},["/java/concurrent/aqs-source-code-reading-notes","/java/concurrent/aqs-source-code-reading-notes.md"]],
  ["v-0c37be00","/java/concurrent/Common%20concurrency%20classes%20under%20Java%208%20concurrent%20packages.html",{"title":"common-concurrency-classes-under-java8-concurrent-packages","type":"article","readingTime":{"minutes":7.19,"words":2157},"excerpt":"Java 8并发包下常见的并发类 阻塞队列： BlockingQueue：阻塞队列接口 BlockingDeque：双端阻塞队列接口 ArrayBlockingQueue：阻塞队列，数组实现 LinkedBlockingDeque：阻塞双端队列，链表实现 LinkedBlockingQueue：阻塞队列，链表实现 DelayQueue：阻塞队列，并且元素是 ","date":"2022-04-13T18:37:08.000Z","category":["concurrent"],"tag":["concurrent"]},["/java/concurrent/Common concurrency classes under Java 8 concurrent packages.html","/java/concurrent/Common%20concurrency%20classes%20under%20Java%208%20concurrent%20packages","/java/concurrent/Common concurrency classes under Java 8 concurrent packages.md","/java/concurrent/Common%20concurrency%20classes%20under%20Java%208%20concurrent%20packages.md"]],
  ["v-4113d76b","/java/concurrent/how-to-communicate-between-java-threads.html",{"title":"the-way-the-thread-communicates","type":"article","readingTime":{"minutes":2.02,"words":605},"excerpt":"Java 线程的通信方式 通信的目的是为了更好的协作，线程无论是交替式执行，还是接力式执行，都需要进行通信告知。 使用 volatile 保证可见性 synchronized Volatile 有两大特性，一是可见性(让线程之间进行通信)，二是有序性，禁止指令重排序 所有 volatile 修饰的变量一旦被某个线程更改，必须立即刷新到主内存 所有 volat","date":"2022-04-13T18:37:08.000Z","category":["concurrent"],"tag":["concurrent","thread"]},["/java/concurrent/how-to-communicate-between-java-threads","/java/concurrent/how-to-communicate-between-java-threads.md"]],
  ["v-5db912ea","/java/concurrent/Implement%20a%20deadlock%20program%20using%20java.html",{"title":"","type":"article","readingTime":{"minutes":1.2,"words":360},"excerpt":"死锁:在java语言中,死锁是指在两个或者两个以上的线程执行的过程中,因争夺资源而产生的一种互相等待的现象 同步锁使用的弊端：当线程任务中出现了多个同步(多个锁)时，如果同步中嵌套了其他的同步。这时容易引发一种现象：程序出现无限等待，这种现象我们称为死锁。这种情况能避免就避免掉。 我们进行下死锁情况的代码演示： 定义锁对象类 线程任务类 测试类 解决死锁问题","date":"2022-04-13T18:37:08.000Z"},["/java/concurrent/Implement a deadlock program using java.html","/java/concurrent/Implement%20a%20deadlock%20program%20using%20java","/java/concurrent/Implement a deadlock program using java.md","/java/concurrent/Implement%20a%20deadlock%20program%20using%20java.md"]],
  ["v-3feab888","/java/concurrent/interview%20preparation.html",{"title":"","type":"article","readingTime":{"minutes":4.84,"words":1453},"excerpt":"重载和重写的区别 重载 a a override 1.8、网络/IO基础 BIO： BIO 其实就是IO，文件读写，scoket通信，都是io操作 BIO又被称为阻塞式I/O模型，那为什么会被叫做这个名字呢，原因就是BIO的特性是同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，处理完成后返回应答给客户端，","date":"2022-04-13T18:37:08.000Z"},["/java/concurrent/interview preparation.html","/java/concurrent/interview%20preparation","/java/concurrent/interview preparation.md","/java/concurrent/interview%20preparation.md"]],
  ["v-21f9c138","/java/concurrent/optimistic%20locking%20and%20pessimistic%20locking.html",{"title":"","type":"article","readingTime":{"minutes":2.32,"words":697},"excerpt":"写操作，系统保证接口的幂等性和关联数据的一致性。 业务数据中有一个唯一字段 businessCode 作为幂等字段。 新增保存 业务数据中唯一字段作为幂等字段 直接交给数据库层面处理。 更新 系统中有一张异常订单表，订单表 exorder 有字段 status，如果 status 为 1，代表待处理，就能对该订单做异常登记处理，生成异常登记记录表 exreg","date":"2022-04-13T18:37:08.000Z"},["/java/concurrent/optimistic locking and pessimistic locking.html","/java/concurrent/optimistic%20locking%20and%20pessimistic%20locking","/java/concurrent/optimistic locking and pessimistic locking.md","/java/concurrent/optimistic%20locking%20and%20pessimistic%20locking.md"]],
  ["v-4378d438","/java/concurrent/",{"title":"concurrent-content","icon":"mulu","type":"article","readingTime":{"minutes":0.25,"words":76},"excerpt":"并发目录\r四种引用类型; \rAbstractQueuedSynchronizer; \rsynchronized; \r线程间的通信方式; \r线程生命周期，五大状态转换分析; \rthreadLocal; \rtheadpool; \r乐观锁&悲观锁;","date":"2022-04-13T01:38:50.000Z","category":["目录"],"tag":["目录"]},["/java/concurrent/index.html","/java/concurrent/README.md"]],
  ["v-9038f6ea","/java/concurrent/synchronized-principle-analysis-and-optimization.html",{"title":"synchronized","type":"article","readingTime":{"minutes":40.9,"words":12270},"excerpt":"可见性 可见性是指一个线程对共享变量进行修改，另一个线程先立即获取到修改后的最新值。 代码： 一个线程根据boolean类型的标记flag，while循环，另一个线程改变这个flag变量的值，另一个线程并不会停止循环。 多个线程都会访问的数据，我们称为线程的共享数据\r总结 并发编程时，会出现可见性问题，当一个线程对共享变量进行了修改，另外的线程并没有立即看到","date":"2022-01-28T00:00:00.000Z","category":["concurrent"],"tag":["concurrent","synchronized"]},["/java/concurrent/synchronized-principle-analysis-and-optimization","/java/concurrent/synchronized-principle-analysis-and-optimization.md"]],
  ["v-1e87c776","/java/concurrent/thread-life-cycle.html",{"title":"thread-life-cycle","type":"article","readingTime":{"minutes":2.82,"words":846},"excerpt":"thread 线程生命周期，五大状态转换分析 前言 本章学习完成，你将会对线程的生命周期有清楚的认识，并且明白不同状态之间是如何转换的，以及对 java 线程状态枚举类解读。 一、线程生命周期 一个完整的线程生命周期，要经过 新建(new)、就绪(Runnable)、运行(Running)、阻塞(Blocked)和死亡(Dead)5 种状态。 1.new 阶","date":"2022-04-13T01:38:50.000Z","category":["thread"],"tag":["concurrent","thread-life-cycle"]},["/java/concurrent/thread-life-cycle","/java/concurrent/thread-life-cycle.md"]],
  ["v-721723bc","/java/concurrent/threadlocal.html",{"title":"ThreadLocal","type":"article","readingTime":{"minutes":1.48,"words":444},"excerpt":"ThreadLocal 概念 类ThreadLocal主要解决的就是每个线程绑定自己的值，可以将ThreadLocal类比喻成全局存放数据的盒子，盒子中可以存储每个线程的私有变量。 首先，它是一个数据结构，有点像 HashMap，可以保存\"key : value\"键值对，但是一个 ThreadLocal 只能保存一个，并且各个线程的数据互不干扰。 在线程 1","date":"2022-04-13T01:38:50.000Z","category":["thread"],"tag":["concurrent","ThreadLocal"]},["/java/concurrent/threadlocal","/java/concurrent/threadlocal.md"]],
  ["v-07012f80","/java/concurrent/threadpool-code-analysis.html",{"title":"threadpool","type":"article","readingTime":{"minutes":3.12,"words":936},"excerpt":"threadpool 线程池 ThreadPoolExecutor 源码分析 1、构造方法 构造方法中有 4 个方法，本质上都是调用的下面这个构造方法： 线程池中定义了四种饱和策略 (拒绝策略) 1、CallerRunsPolicy 绕过线程池，直接执行线程的 run 方法 2、 AbortPolicy(线程池默认的策略) 抛出 RejectedExecut","date":"2022-04-13T01:38:50.000Z","category":["thread"],"tag":["threadpool"]},["/java/concurrent/threadpool-code-analysis","/java/concurrent/threadpool-code-analysis.md"]],
  ["v-a7c56694","/java/datasource/detailed-explanation-of-b-tree-and-b+-tree.html",{"title":"detailed-explanation-of-b-tree-and-b+-tree","icon":"tree","type":"article","readingTime":{"minutes":4.6,"words":1379},"excerpt":"B树、B+树详解 B-树是一种多路自平衡的搜索树（B树是一颗多路平衡查找树），它类似普通的平衡二叉树，不同的一点是B-树允许每个节点有更多的子节点。下图是 B-树的简化图. B-树有如下特点: 1. 所有键值分布在整颗树中（索引值和具体data都在每个节点里）； 2. 任何一个关键字出现且只出现在一个结点中； 3. 搜索有可能在非叶子结点结束（最好情况O(1","date":"2022-04-13T18:37:08.000Z","category":["mysql"],"tag":["集合","mysql"]},["/java/datasource/detailed-explanation-of-b-tree-and-b+-tree","/java/datasource/detailed-explanation-of-b-tree-and-b+-tree.md"]],
  ["v-4a93ae2f","/java/datasource/explain-execution-plan.html",{"title":"explain","type":"article","readingTime":{"minutes":6.04,"words":1813},"excerpt":"explain 执行计划 合理设计并利用索引 使用EXPLAIN关键字，可以模拟Mysql优化器执行SQL语句，分析查询语句的性能。 在select语句之前加上explain关键字，mysql会在查询上设置一个标记，执行查询的时候并不是真正的执行sql语句，而是返回该语句的执行计划。 注意：如果from钟包含子查询，任然会执行该子查询，将结果放入临时表。 e","date":"2020-09-01T00:00:00.000Z","category":["mysql"],"tag":["优化","mysql"]},["/java/datasource/explain-execution-plan","/java/datasource/explain-execution-plan.md"]],
  ["v-66ccba04","/java/datasource/Mysql%20index.html",{"title":"MySQL index","icon":"index","type":"article","readingTime":{"minutes":5.03,"words":1510},"excerpt":"sql调优 使用exists代替in 避免在 where 子句中对字段进行函数操作。 like 中通配符的使用。 下面的语句会导致全表扫描，尽量少用。如： between and 代替 in 少用 in 或 not in 像这种连续的数值，我们可以使用 BETWEEN AND，如： 避免在 where 子句中使用 or来链接条件。 避免在 where 子句中","date":"2022-03-18T00:00:00.000Z","category":["mysql"],"tag":["索引"]},["/java/datasource/Mysql index.html","/java/datasource/Mysql%20index","/java/datasource/Mysql index.md","/java/datasource/Mysql%20index.md"]],
  ["v-6b25ce2d","/java/datasource/Mysql%20master-slave%20replication.html",{"title":"mysql-master-slave-replication","type":"article","readingTime":{"minutes":0.55,"words":165},"excerpt":"mysql主从复制 MySQL主从复制是一个异步的复制过程，底层是基于数据库自带的二进制日志功能。就是一台或多台MySQL数据库（slave，即从库）从另一台MySQL数据库（\rmaster将改变纪录到二进制日志（binary log); \rslave将master的binary log拷贝到它的中继日志（relay log）; \rslave重做中继日志中的","date":"2022-04-13T18:37:08.000Z","category":["mysql"],"tag":["主从复制"]},["/java/datasource/Mysql master-slave replication.html","/java/datasource/Mysql%20master-slave%20replication","/java/datasource/Mysql master-slave replication.md","/java/datasource/Mysql%20master-slave%20replication.md"]],
  ["v-5119153d","/java/datasource/mysql-streaming-query.html",{"title":"liushiquery","icon":"sql","type":"article","readingTime":{"minutes":4.44,"words":1331},"excerpt":"前言 程序访问MySQL数据库时，当查询出来的数据量特别大时，数据库驱动把加载到的数据全部加载到内存里，就有可能会导致内存溢出（OOM）。 其实在MySQL数据库中提供了流式查询，允许把符合条件的数据分批一部分一部分地加载到内存中，可以有效避免OOM； 本文主要介绍如何使用流式查询并对比普通查询进行性能测试。 查询成功后不是返回一个集合而是返回一个迭代器，应","date":"2021-08-03T00:00:00.000Z","category":["mysql"]},["/java/datasource/mysql-streaming-query","/java/datasource/mysql-streaming-query.md"]],
  ["v-689caf1c","/java/datasource/mysql-transaction.html",{"title":"mysql shiwu","icon":"shiwu","type":"article","readingTime":{"minutes":3.27,"words":981},"excerpt":"mysql特性 原子性：事务是一个不可分割的工作单位，事务中的操作要么都成功（commit），要么都失败（rollback）。 一致性：事务前后数据的完整性必须保持一致。 事务执行的结果必须使数据库从一个一致性状态变到另一个一致性的状态。在多个事务并行情况下； 持久性：指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该","date":"2022-02-28T00:00:00.000Z","category":["mysql"],"tag":["mysql","事务"]},["/java/datasource/mysql-transaction","/java/datasource/mysql-transaction.md"]],
  ["v-17294c43","/java/datasource/mysql-tuning.html",{"title":"sql tiaoyou","icon":"youhuayunhang","type":"article","readingTime":{"minutes":8.93,"words":2678},"excerpt":"一、前言 在应用开发的早期，数据量少，开发人员开发功能时更重视功能上的实现，随着生产数据的增长，很多SQL语句开始暴露出性能问题，对生产的影响也越来越大，有时可能这些有问题的SQL就是整个系统性能的瓶颈。 二、SQL优化一般步骤 1、通过慢查日志等定位那些执行效率较低的SQL语句 2、explain 分析SQL的执行计划 需要重点关注 type、rows、f","author":"狼爷、zsj","date":"2020-08-01T00:00:00.000Z","category":["mysql"],"tag":["优化"]},["/java/datasource/mysql-tuning","/java/datasource/mysql-tuning.md"]],
  ["v-94fb3b86","/java/datasource/Nine%20classic%20design%20patterns%20in%20mybatis.html",{"title":"","type":"article","readingTime":{"minutes":0.86,"words":257},"excerpt":"虽然我们都知道有二十三种设计模式，但是大多停留在概念层面，真实开发中很少遇到。mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。 1. Builder模式，例如SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBu","date":"2022-04-13T18:37:08.000Z"},["/java/datasource/Nine classic design patterns in mybatis.html","/java/datasource/Nine%20classic%20design%20patterns%20in%20mybatis","/java/datasource/Nine classic design patterns in mybatis.md","/java/datasource/Nine%20classic%20design%20patterns%20in%20mybatis.md"]],
  ["v-52415d16","/java/datasource/",{"title":"datasource mulu","icon":"mulu","type":"article","readingTime":{"minutes":0.16,"words":47},"excerpt":"MySQL目录\r索引结构 b&b+树; \rsql优化; \rMysql流式查询; \rmysql事务; \r存储引擎; \rmysql调优;","date":"2021-10-01T00:00:00.000Z","category":["目录"]},["/java/datasource/index.html","/java/datasource/README.md"]],
  ["v-4b7c4a3e","/java/datasource/sql.html",{"title":"sql keyword","icon":"sql","type":"article","readingTime":{"minutes":0.57,"words":172},"excerpt":"SQL CASE 语句 作为 if-then-else 之类逻辑的关键字。 SELECT CASE(\"栏位名”) WHEN “条件 1” THEN “结果 1” WHEN “条件 2” THEN “结果 2” ... [ELSE “结果 N”] END FROM “表格名” 例： CREATE INDEX 语句：在不读取整个表的情况下，更快地查找数据 简单索","date":"2022-04-13T01:38:50.000Z","category":["mysql"],"tag":["mysql","sql"]},["/java/datasource/sql","/java/datasource/sql.md"]],
  ["v-3420c2af","/java/datasource/storage-engine.html",{"title":"dataource","type":"article","readingTime":{"minutes":3.69,"words":1107},"excerpt":"Innodb &Myisam 1. myisam 是不支持支持事务；innodb支持事务。 2. myisam支持表级锁；innodb 支持行锁，粒度更小，但是在执行不能确定扫描范围的sql语句时，innodb同样会锁全表。 3. 数据都是存在磁盘文件，通过磁盘IO 操作读取数据，myisam有三个文件.frm(存储表定义) .myi（存储表索引） .myd","date":"2020-08-01T00:00:00.000Z","category":["mysql"]},["/java/datasource/storage-engine","/java/datasource/storage-engine.md"]],
  ["v-3aa0fb23","/java/design-patterns/Six%20principles%20of%20design%20patterns.html",{"title":"","type":"article","readingTime":{"minutes":0.42,"words":125},"excerpt":"单一职责原则： 一个类只负责一项职责 里氏替换原则 所有引用基类的地方必须都能透明地使用其子类的对象。 依赖倒置原则 定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。 开闭原则 定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。","date":"2022-04-13T18:37:08.000Z"},["/java/design-patterns/Six principles of design patterns.html","/java/design-patterns/Six%20principles%20of%20design%20patterns","/java/design-patterns/Six principles of design patterns.md","/java/design-patterns/Six%20principles%20of%20design%20patterns.md"]],
  ["v-54fb687a","/java/interview/synchronized.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":"","date":"2022-04-13T01:38:50.000Z"},["/java/interview/synchronized","/java/interview/synchronized.md"]],
  ["v-3312f739","/java/jvm/class%20loader.html",{"title":"","type":"article","readingTime":{"minutes":0.4,"words":119},"excerpt":"双亲委派模型 避免用户自己编写的类动态替换JAVA的一些核心类，比如String。同时也避免了类的重复加载，因为JVM中区分不同类，不仅仅根据类名，相同的class文件被不同ClassLoader加载就是不同的两个类。 双亲委派模型的好处： 主要是为了安全性，便面用户自己编写的类动态替换JAVA的一些核心类，比如String。","date":"2022-04-13T18:37:08.000Z"},["/java/jvm/class loader.html","/java/jvm/class%20loader","/java/jvm/class loader.md","/java/jvm/class%20loader.md"]],
  ["v-acf5ed20","/java/jvm/deep%20copy%20and%20shallow%20copy.html",{"title":"Shallow&Deep copy","type":"article","readingTime":{"minutes":3.96,"words":1189},"excerpt":"基本类型和引用类型 在Java中数据类型可以分为两大类：基本类型和引用类型。 基本类型也称为值类型，分别是字符型char，布尔型boolean以及数值型 byte、short、int、long、float、double。 引用类型则包括类、接口、数组、枚举等。 内存空间分为堆和栈 基本类型直接在栈中存储数值，而引用类型是将引用放在栈中，实际存储的值是放在堆中","date":"2022-04-13T18:37:08.000Z","category":["jvm"],"tag":["深拷贝和浅拷贝"]},["/java/jvm/deep copy and shallow copy.html","/java/jvm/deep%20copy%20and%20shallow%20copy","/java/jvm/deep copy and shallow copy.md","/java/jvm/deep%20copy%20and%20shallow%20copy.md"]],
  ["v-bdf778c2","/java/jvm/jvm-class-loading-and-bytecode-technology.html",{"title":"jvm-class-loading-and-bytecode-technology","type":"article","readingTime":{"minutes":2.34,"words":703},"excerpt":"JVM类加载与字节码技术&内存模型 class load 类加载与字节码技术 1、类文件结构 通过 javac 类名.java 编译 java 文件后，会生成一个 .class 的文件！下图是字节码文件： 据 JVM 规范，类文件结构如下： 1）魔数 U4 magic 对应字节码文件的 0~3 个字节 0000000 ca fe ba be 00 00 00","category":["jvm"],"tag":["jvm"]},["/java/jvm/jvm-class-loading-and-bytecode-technology","/java/jvm/jvm-class-loading-and-bytecode-technology.md"]],
  ["v-6bef3c55","/java/jvm/jvm-garbage-collection.html",{"title":"jvm-gc","type":"article","readingTime":{"minutes":14.56,"words":4368},"excerpt":"（1）Java内存运行时区域的各个部分，其中程序计数器、虚拟机栈、本地方法栈三个区域随线程而生，随线程尔灭；栈中的栈帧随着方法的进入和退出而有条不紊的执行着出栈和入栈操作。 （2）每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的，因此这几个区域的内存和回收都具确定性， 如果垃圾不被回收，内存迟早会被消耗空，因为我们在不断的分配内存空间而不进行回收，","date":"2021-02-01T00:00:00.000Z","category":["jvm"],"tag":["jvm","优化"]},["/java/jvm/jvm-garbage-collection","/java/jvm/jvm-garbage-collection.md"]],
  ["v-270fc1f8","/java/jvm/jvm-memory-structure.html",{"title":"jvm-architecture","type":"article","readingTime":{"minutes":15.53,"words":4660},"excerpt":"JVM内存结构\rJava Virtual Machine ，Java 程序的运行环境(Java 二进制字节码的运行环境)。\r一次编译，处处执行; \r自动的内存管理，垃圾回收机制; \r数组下标越界检查; 3）比较 JVM、JRE、JDK 的关系如下图所示 操作系统(Windows+Linux) Jvm ~jre(jvm+基本类库) ~jdk(jvm+基本类库+","category":["jvm"],"tag":["jvm"]},["/java/jvm/jvm-memory-structure","/java/jvm/jvm-memory-structure.md"]],
  ["v-15e64194","/java/jvm/jvm-tuning.html",{"title":"jvm-tiaoyou","icon":"youhuayunhang","type":"article","readingTime":{"minutes":0.95,"words":284},"excerpt":"jvm调优 虚拟机和内存调优技能 第一步，发现系统很卡，或者日志里频繁出现 OOM 异常。 第二步，用 dump 文件看 OOM 时的内存镜像，看的工具可以是 JMAT。这两个步骤是通用的。 生成dump文件 jmap -dump:live,format=b,file=xxxx.bin 进程ID 第三，通过 dump 文件，jvisualvm 启动可视化工具","category":["jvm"],"tag":["jvm","优化"]},["/java/jvm/jvm-tuning","/java/jvm/jvm-tuning.md"]],
  ["v-09b4dd26","/java/jvm/life%20cycle%20of%20a%20class.html",{"title":"","type":"article","readingTime":{"minutes":10.41,"words":3122},"excerpt":"类的生命周期 七大阶段 类从被加载到虚拟机内存中开始，到卸载出内存为止，加载、验证、准备、解析、初始化、使用、卸载七个阶段。其实验证、准备、解析三个部分统称为连接。 加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、 初始化（Initialization）、使用（Using）和卸载（Unl","date":"2022-04-13T18:37:08.000Z"},["/java/jvm/life cycle of a class.html","/java/jvm/life%20cycle%20of%20a%20class","/java/jvm/life cycle of a class.md","/java/jvm/life%20cycle%20of%20a%20class.md"]],
  ["v-3becafe0","/java/jvm/LinkedList.html",{"title":"","type":"article","readingTime":{"minutes":1.86,"words":558},"excerpt":"前言 上篇文章我们分析了常见的ArrayList源码，它的内部是由一个数组来实现的。那么今天，我们来分析另一个常见的类LinkedList。本文分析都来自Java8。(ps:这段话写自写完本文记录后添加。个人感想为已经写成了介绍链表) 一、类说明 首先我们来看一下这个类。 这是一个LinkedList的内部类，还是比较简单的。首先一个泛型的item变量，用来","date":"2022-04-13T18:37:08.000Z"},["/java/jvm/LinkedList","/java/jvm/LinkedList.md"]],
  ["v-6cec0ebc","/java/jvm/",{"title":"jvm mulu","icon":"mulu","type":"article","readingTime":{"minutes":0.13,"words":38},"excerpt":"内存结构; \r垃圾回收; \r类加载与字节码技术&内存模式; \rjvm调优;","date":"2022-04-13T01:38:50.000Z","category":["目录"],"star":4},["/java/jvm/index.html","/java/jvm/README.md"]],
  ["v-d2987ffc","/java/jvm/Why%20does%20the%20new%20generation%20memory%20need%20to%20have%20two%20SURVIVOR%20areas.html",{"title":"","type":"article","readingTime":{"minutes":0.24,"words":71},"excerpt":"标记清除算法、复制算法、标记整理算法， 标记、清除两个步骤，? survivor为什么不分更多块儿呢？ 公司集群几个节点？ 数据检索机制、 数据的安全性、 ISR机制、 broker、 消费与提交策略， Java代码实现。","date":"2022-04-13T18:37:08.000Z"},["/java/jvm/Why does the new generation memory need to have two SURVIVOR areas.html","/java/jvm/Why%20does%20the%20new%20generation%20memory%20need%20to%20have%20two%20SURVIVOR%20areas","/java/jvm/Why does the new generation memory need to have two SURVIVOR areas.md","/java/jvm/Why%20does%20the%20new%20generation%20memory%20need%20to%20have%20two%20SURVIVOR%20areas.md"]],
  ["v-346194ff","/java/message-queue/How%20to%20ensure%20that%20the%20message%20queue%20is%20highly%20available.html",{"title":"","type":"article","readingTime":{"minutes":0.31,"words":94},"excerpt":"rocketMQ consumer 需要部署多个节点，以保证\rZookeeper部署2N+1节点，形成ZOOKEEPER集群，保证高可用。; \rkafka Broker部署集群。; \r每个TOPIC的PARTITION，基于【副本机制】，在Broker集群中复制，形成REPICA副本，保证消息存储的可靠性。每个REPILICA副本，都会选择出一个LEADER","date":"2022-04-13T18:37:08.000Z"},["/java/message-queue/How to ensure that the message queue is highly available.html","/java/message-queue/How%20to%20ensure%20that%20the%20message%20queue%20is%20highly%20available","/java/message-queue/How to ensure that the message queue is highly available.md","/java/message-queue/How%20to%20ensure%20that%20the%20message%20queue%20is%20highly%20available.md"]],
  ["v-41edd52b","/java/message-queue/kafka%20supplement.html",{"title":"kafka","type":"article","readingTime":{"minutes":15.28,"words":4585},"excerpt":"kafka Kafka 是一个分布式流式处理平台。 流平台具有三个关键功能： 1. 消息队列：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。 2. 容错的持久方式存储记录消息流： Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险。 3. 流式处理平台: 在消息发布的时候进行处理，Kafka 提供了一个完整的","date":"2022-04-13T18:37:08.000Z","category":["消息队列"],"tag":["kafka"]},["/java/message-queue/kafka supplement.html","/java/message-queue/kafka%20supplement","/java/message-queue/kafka supplement.md","/java/message-queue/kafka%20supplement.md"]],
  ["v-2862992b","/java/message-queue/kafka.html",{"title":"kafka","type":"article","readingTime":{"minutes":6.54,"words":1961},"excerpt":"kafka 特点\r高吞吐量、低延迟：消息中间件每秒可以处理几十万条消息，它的延迟最低只有几毫秒; \r可扩展性：kafka 集群支持热扩展; \r持久性、可靠性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失; \r容错性：允许集群中节点失败(若副本数量为 n,则允许 n-1 个节点失败); \r高并发：支持数千个客户端同时读写; \r支持Kafka Serve","date":"2022-04-13T01:38:50.000Z","category":["消息队列"],"tag":["mq"]},["/java/message-queue/kafka","/java/message-queue/kafka.md"]],
  ["v-19a38847","/java/message-queue/rabbit.html",{"title":"RabbitMQ","type":"article","readingTime":{"minutes":6.99,"words":2096},"excerpt":"RabbitMQ 如何避免消息堆积？ 消息堆积问题产生的原因往往是因为消息发送的速度超过了消费者消息处理的速度。 解决方案 无外乎以下三点：\r提高消费者处理速度; \r增加更多消费者; \r增加队列消息存储上限; 1、提高消费者处理速度 消费者处理速度是由业务代码决定的，所以我们能做的事情包括：\r尽可能优化业务代码，提高业务性能; \r接收到消息后，开启线程池，并","date":"2022-04-13T01:38:50.000Z","category":["message-queue"],"tag":["mq"]},["/java/message-queue/rabbit","/java/message-queue/rabbit.md"]],
  ["v-6dc7e490","/java/message-queue/",{"title":"message-queue-content","icon":"mulu","type":"article","readingTime":{"minutes":0.12,"words":35},"excerpt":"消息队列目录\rKafka背景及架构介绍; \rrabbit; \r为什么一定要用消息中间件？;","date":"2022-04-13T01:38:50.000Z","category":["目录"],"star":4},["/java/message-queue/index.html","/java/message-queue/README.md"]],
  ["v-26e2f7a0","/java/message-queue/why-must-message-middleware-be-used.html",{"title":"why-you-must-use-message-middleware","icon":"mulu","type":"article","readingTime":{"minutes":11.43,"words":3429},"excerpt":"为什么一定要用消息中间件？ 消息中间件是分布式系统常用的组件，无论是异步化、解耦、削峰等都有广泛的应用价值。我们通常会认为，消息中间件是一个可靠的组--这里所谓的可靠是指：只要我们消息成功投递到了消息中间件，消息就不会丢失，即消息肯定会至少保证消息能被消费者成功消费一次，这是消息中间件最基本的特性之一。 举个栗子：一个消息M发送到了消息中间件，消息投递到了消","date":"2022-04-13T18:37:08.000Z","category":["message-queue"]},["/java/message-queue/why-must-message-middleware-be-used","/java/message-queue/why-must-message-middleware-be-used.md"]],
  ["v-30b709b7","/java/redis/analysis-and-construction-of-redis.html",{"title":"redis high availability","icon":"redis","type":"article","readingTime":{"minutes":10.68,"words":3205},"excerpt":"高可用Redis服务架构分析与搭建！ 基于内存的Redis应该是目前各种Web开发业务中最为常用的Key-Value数据库了，我们经常在业务中用其存储用户登陆态（Session存储），加速一些热数据的查询（相比较MySQL而言，速度有数量级的提升），做简单的消息队列（LPUSH和BRPOP）、订阅发布（PUB/SUB）系统等等。规模比较大的互联网公司，一般都","author":"HorstXu","date":"2018-06-11T00:00:00.000Z","category":["redis"]},["/java/redis/analysis-and-construction-of-redis","/java/redis/analysis-and-construction-of-redis.md"]],
  ["v-6c0a4543","/java/redis/Content%20to%20be%20added.html",{"title":"redislock","type":"article","readingTime":{"minutes":2.28,"words":685},"excerpt":"redis 分布式锁依赖于 redis，如果 redis 宕机则锁失效。如何解决？ 可以做搭建主从集群，做数据备份。 但如果搭建主从集群做数据备份时，进程 A 获取锁，master 还没有把数据备份到 slave，master 宕机，slave 升级为 master，此时原来锁失效，其它进程也可以获取锁，出现安全问题。如何解决？ 关于这个问题，Redis 官","date":"2022-04-13T18:37:08.000Z","category":["redis"],"tag":["redis lock"]},["/java/redis/Content to be added.html","/java/redis/Content%20to%20be%20added","/java/redis/Content to be added.md","/java/redis/Content%20to%20be%20added.md"]],
  ["v-898d3000","/java/redis/interview.html",{"title":"redis-shuli","icon":"interview","type":"article","readingTime":{"minutes":26.09,"words":7826},"excerpt":"为什么说REDIS是单线程的？? 近乎所有与Java相关的面试都会问到缓存的问题，基础一点的会问到什么是“二八定律”、什么是”热数据和冷数据“，复杂一点的会问到缓存雪崩、缓存穿透，缓存预热，缓存更新、缓存降级等问题，这些看似不常见的概念，都会与我们的缓存服务器相关，一般常见的缓存服务器有Redis，Memcached等，而笔者目前最常用的也只有Redis这一","date":"2022-04-13T01:38:50.000Z","category":["redis"],"tag":["redis"]},["/java/redis/interview","/java/redis/interview.md"]],
  ["v-c8bb43f0","/java/redis/",{"title":"redis-content","icon":"mulu","type":"article","readingTime":{"minutes":0.11,"words":34},"excerpt":"目录\rredis 知识点梳理1; \rredis 知识点梳理2; \rredis高可用架构分析和搭建;","date":"2022-04-13T01:38:50.000Z","category":["目录"],"sticky":5,"star":4},["/java/redis/index.html","/java/redis/README.md"]],
  ["v-a44daa22","/java/redis/redis%20data%20structure.html",{"title":"","type":"article","readingTime":{"minutes":0.22,"words":65},"excerpt":"redis 支持更丰富的数据类型(支持更复杂的应用场景)： Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。memcache 支持简单的数据类型，String。","date":"2022-04-13T18:37:08.000Z"},["/java/redis/redis data structure.html","/java/redis/redis%20data%20structure","/java/redis/redis data structure.md","/java/redis/redis%20data%20structure.md"]],
  ["v-6501c664","/java/redis/REDIS%20does%20the%20KEYS%20regular%20matching%20operation.html",{"title":"","type":"article","readingTime":{"minutes":0.62,"words":186},"excerpt":"PHp工程师执行redis keys *导致数据库宕机！ keys wxdb（此处省略）cf8 这样的命令，导致Redis锁住，导致CPU飙升，引起所有支付链路卡住，等十几秒结束后，所有的请求流量全部挤压到了RDS数据库中，使数据库产生了雪崩效应发生了宕机事件。 时间复杂度为O(N)的命令，都要慎重，不要在生产上随便使用。例如：hgetall、lrange、","date":"2022-04-13T18:37:08.000Z"},["/java/redis/REDIS does the KEYS regular matching operation.html","/java/redis/REDIS%20does%20the%20KEYS%20regular%20matching%20operation","/java/redis/REDIS does the KEYS regular matching operation.md","/java/redis/REDIS%20does%20the%20KEYS%20regular%20matching%20operation.md"]],
  ["v-40977f94","/java/redis/redis-distributed%20lock.html",{"title":"redis-lock","icon":"redis","type":"article","readingTime":{"minutes":3.06,"words":919},"excerpt":"分布式锁 Redis 中的乐观锁机制，可以帮助我们实现分布式锁的效果，用于解决分布式系统下的多线程安全问题\rcode-group\r基于Redis的分布式锁\r不带锁\rRedisson 典型应用场景之高性能点赞 一般情况下, 一个完整的点赞业务模块包含两大核心操作: 点赞和取消点赞. 用户点赞文章 1. 校验文章，用户等基本信息 2. 校验通过，查询当前用户-当","date":"2022-04-13T18:37:08.000Z","category":["redis"],"tag":["redis","lock","fubushi"]},["/java/redis/redis-distributed lock.html","/java/redis/redis-distributed%20lock","/java/redis/redis-distributed lock.md","/java/redis/redis-distributed%20lock.md"]],
  ["v-220df774","/java/redis/redis.html",{"title":"redis","type":"article","readingTime":{"minutes":6.08,"words":1824},"excerpt":"redis tiaoyou 比如业务请求里，会经常用公司 ID 向风控模块看风险情况，那么就可以用 ID 做键，风控字段做值，另外再把 null 放到键里，以放缓存击穿。 跳表 我们保存了热点数据到缓存，缓存层 redis 和 存储层 mysql 的数据存在时间窗口的不一致性，redis 跟更新策略有关 会使代码维护成本增加，新增数据，要同时处理缓存和数据库","date":"2022-04-13T01:38:50.000Z","category":["redis"],"tag":["redis"]},["/java/redis/redis","/java/redis/redis.md"]],
  ["v-822a8660","/java/soa/Distributed%20lock.html",{"title":"为什么分布式要有分布式锁！","type":"article","readingTime":{"minutes":8.14,"words":2442},"excerpt":"为什么分布式要有分布式锁！ 目前网上大部分的基于ZOOKEEPER，和REDIS的分布式锁的文章都不够全面。要么就是特意避开集群的情况，要么就是考虑不全，堵着看着还是一脸迷茫。坦白说，这种老题材，很难写出新创意，博主内心战战兢兢，如履薄冰，文中有什么不严谨之处，欢迎批评。 博主的这篇文章，不上代码，只讲分析。 1、在REDIS方面，有开源REDISSION的","date":"2022-04-13T18:37:08.000Z"},["/java/soa/Distributed lock.html","/java/soa/Distributed%20lock","/java/soa/Distributed lock.md","/java/soa/Distributed%20lock.md"]],
  ["v-4b5fca76","/java/soa/distributed-id.html",{"title":"fubushi id","icon":"id","type":"article","readingTime":{"minutes":3.09,"words":928},"excerpt":"分布式 id\rSnowflake** Snowflake 是 Twitter 开源的分布式 ID 生成算法，目的是在分布式系统中生成全局唯一且趋势递增的 long(64bit) 的id数值。 其特性是各节点无需协调、按时间大致有序、且整个集群各节点单不重复。 该数值的默认组成如下(符号位之外的三部分允许个性化调整)： 1bit: 符号位，始终是 0(为了保证","category":["fubushi"],"tag":["分布式id"]},["/java/soa/distributed-id","/java/soa/distributed-id.md"]],
  ["v-a478043a","/java/soa/distributed-transaction.html",{"title":"fubuhi transaction","icon":"fubuhi","type":"article","readingTime":{"minutes":18.19,"words":5457},"excerpt":"解决跨库操作的数据一致性问题： 在分布式或者微服务架构中，每个服务都有自己的数据源，使用不同事务管理器，如果A服务去调用B服务，B服务执行失败了，A服务的事务和B服务的事务都会回滚，这时候是不存在事务问题的，但是如果A服务B服务执行成功之后出现异常，A服务的事原子性务会回滚，但是B服务的事务不会回滚，此时就存在分布式事务问题。 使用场景：\r转账：包含转出和转","date":"2021-10-21T00:00:00.000Z","category":["分布式"],"tag":["tcc","分布式事务"]},["/java/soa/distributed-transaction","/java/soa/distributed-transaction.md"]],
  ["v-172ba0ac","/java/soa/Dubbo%20interview%2018%20questions!%20Do%20you%20know%20all%20these.html",{"title":"dubbo interview","icon":"dubbo","type":"article","readingTime":{"minutes":9.87,"words":2962},"excerpt":"dubbo是什么 dubbo是一个分布式框架，远程服务调用的分布式框架，其核心部分包含：\r集群容错：提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。; \r远程通讯：提供对多种基于长连接的NIO 框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。 ; \r自动发现：基于注册中","author":"Dean Wang","date":"2022-04-13T18:37:08.000Z","category":["soa"]},["/java/soa/Dubbo interview 18 questions! Do you know all these.html","/java/soa/Dubbo%20interview%2018%20questions!%20Do%20you%20know%20all%20these","/java/soa/Dubbo interview 18 questions! Do you know all these.md","/java/soa/Dubbo%20interview%2018%20questions!%20Do%20you%20know%20all%20these.md"]],
  ["v-08ff974e","/java/soa/dubbo.html",{"title":"dubbo","icon":"dubbo","type":"article","readingTime":{"minutes":5.61,"words":1683},"excerpt":"Dubbo 协议 Dubbo: 单一长连接和 NIO 异步通讯，适合大并发小数据量的服务调用， 以及消费者远大于提供者。传输协议 TCP，异步，Hessian 序列化; Rmi: 采用 JDK 标准的 rmi 协议实现，传输参数和返回参数对象需要实现 Serializable 接口，使用 java 标准序列化机制，使用阻塞式短连接，传输数 据包大小混合，消费","date":"2022-04-13T01:38:50.000Z","category":["soa"]},["/java/soa/dubbo","/java/soa/dubbo.md"]],
  ["v-5d7fcc53","/java/soa/gateway.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":"","date":"2022-04-13T01:38:50.000Z"},["/java/soa/gateway","/java/soa/gateway.md"]],
  ["v-600157d6","/java/soa/Netty.html",{"title":"","type":"article","readingTime":{"minutes":1.78,"words":534},"excerpt":"##从一个简单的例子开始 开篇讲到了，为了满足高并发下网络请求，引入了NIO的概念。Netty是针对NIO的实现，在NIO封装，网络调用，数据处理以及性能优化等方面都有不俗的表现。 学习架构最容易的方式就是从实例入手，从客户端访问服务端的代码来看看Netty是如何运作的。再一次介绍代码中调用的组件以及组件的工作原理。 假设有一个客户端去调用一个服务端，假设服","date":"2022-04-13T16:10:37.000Z"},["/java/soa/Netty","/java/soa/Netty.md"]],
  ["v-243f9983","/java/soa/nio.html",{"title":"","type":"article","readingTime":{"minutes":5.88,"words":1765},"excerpt":"Netty&NIO Netty 是一个异步的、基于事件驱动的网络应用框架，它可以用来开发高性能服务端和客户端。 问题 以前编写网络调用程序的时候，我们都会在客户端创建一个 Socket，通过这个 Socket 连接到服务端。 服务端根据这个 Socket 创建一个 Thread，用来发出请求。客户端在发起调用以后，需要等待服务端处理完成，才能继续后面的操作。","date":"2022-04-13T01:38:50.000Z"},["/java/soa/nio","/java/soa/nio.md"]],
  ["v-6ce41784","/java/soa/",{"title":"distributed-content","icon":"mulu","type":"article","readingTime":{"minutes":0.25,"words":75},"excerpt":"分布式目录\rZookeepre; \rnio; \rgateway; \rdubbo; \r分布式事务; \r分布式id; \rDubbo面试18问！这些你都会吗？; \rspringCloud; \r一步步带你了解前后端分离利器之JWT;","date":"2022-04-13T01:38:50.000Z","tag":["目录"]},["/java/soa/index.html","/java/soa/readme.md"]],
  ["v-5e09266f","/java/soa/Spring%20Cloud%20Producer%20Cluster%20Edition%20Construction.html",{"title":"","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"需要换成生产者的服务名称就行了，如下图： 你看得见爱在满红殆尽的燃烧着吗","date":"2022-04-13T18:37:08.000Z"},["/java/soa/Spring Cloud Producer Cluster Edition Construction.html","/java/soa/Spring%20Cloud%20Producer%20Cluster%20Edition%20Construction","/java/soa/Spring Cloud Producer Cluster Edition Construction.md","/java/soa/Spring%20Cloud%20Producer%20Cluster%20Edition%20Construction.md"]],
  ["v-6f9a49f4","/java/soa/spring-cloud.html",{"title":"spring cloud","icon":"cloud","type":"article","readingTime":{"minutes":8.07,"words":2421},"excerpt":"什么是微服务？spring cloud spring cloud是一系列框架的有序集合，它利用了spring boot的开发便利性简化了分布式系统的开发，比如服务发现、服务网关、服务路由、链路追踪等。spring cloud并不重复造轮子，而是将市面上开发的比较好的模块集成进去，进行封装，从而减少了各模块的开发成本。换句话说：spring cloud提供了构","date":"2022-04-13T01:38:50.000Z","category":["soa"],"tag":["soa"]},["/java/soa/spring-cloud","/java/soa/spring-cloud.md"]],
  ["v-42d77141","/java/soa/Take%20you%20step%20by%20step%20to%20understand%20the%20JWT.html",{"title":"JWT","type":"article","readingTime":{"minutes":11.12,"words":3337},"excerpt":"一步步带你了解前后端分离利器之JWT 一、HTTP的无状态性 HTTP 是无状态协议，它不对之前发送过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。假设要求登录认证的 Web 页面本身无法进行状态的管理（不记录已登录的状态），那么每次跳转新页面不是要再次登录，就是要在每次请求报文中附加参数来管理登录状态。 不可否认，无状态协议当","author":"徐刘根","date":"2018-02-01T00:00:00.000Z","tag":["jwt"]},["/java/soa/Take you step by step to understand the JWT.html","/java/soa/Take%20you%20step%20by%20step%20to%20understand%20the%20JWT","/java/soa/Take you step by step to understand the JWT.md","/java/soa/Take%20you%20step%20by%20step%20to%20understand%20the%20JWT.md"]],
  ["v-639e162a","/java/soa/Zookeeper.html",{"title":"ZooKeeper","icon":"ZooKeeper","type":"article","readingTime":{"minutes":5.33,"words":1599},"excerpt":"概念 ZooKeeper 是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户。 分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。","author":"lanqiu5ge","date":"2018-08-02T00:00:00.000Z","category":["soa"],"tag":["ZooKeeper"]},["/java/soa/Zookeeper","/java/soa/Zookeeper.md"]],
  ["v-74bd8090","/java/spring/@RequestBody%E5%92%8C&ResponseBody.html",{"title":"RequestBody&ResponseBody","icon":"annotation","type":"article","readingTime":{"minutes":1.82,"words":547},"excerpt":"Content-Type application/x-www-form-urlencoded application/x-www-form-urlencoded主要用于表单形式的POST请求中，如普通的表单提交，或者js发包，默认都是通过这种方式，可以使用Postman来发一个这种类型请求： 用get提交，和post提交是一样的，数据格式都是这样，get和p","date":"2019-06-23T00:00:00.000Z","category":["spring"],"tag":["RequestBody&ResponseBody","annotation"]},["/java/spring/@RequestBody和&ResponseBody.html","/java/spring/@RequestBody%E5%92%8C&ResponseBody","/java/spring/@RequestBody和&ResponseBody.md","/java/spring/@RequestBody%E5%92%8C&ResponseBody.md"]],
  ["v-b0cef728","/java/spring/Let%20me%20tell%20you%20what%20design%20patterns%20are%20used%20in%20Spring.html",{"title":"","type":"article","readingTime":{"minutes":6.24,"words":1873},"excerpt":"spring中常用的设计模式达到九种，我们举例说明。 1、简单工厂模式 又叫做静态工厂方法（StaticFactory Method）模式，但不属于23种GOF设计模式之一。 GoF（Gang of Four），中文名——四人组。 《Design Patterns: Elements of Reusable Object-Oriented Software》","date":"2022-04-13T18:37:08.000Z"},["/java/spring/Let me tell you what design patterns are used in Spring.html","/java/spring/Let%20me%20tell%20you%20what%20design%20patterns%20are%20used%20in%20Spring","/java/spring/Let me tell you what design patterns are used in Spring.md","/java/spring/Let%20me%20tell%20you%20what%20design%20patterns%20are%20used%20in%20Spring.md"]],
  ["v-211a2a4e","/java/spring/",{"title":"spring mulu","icon":"mulu","type":"article","readingTime":{"minutes":0.06,"words":19},"excerpt":"java目录\r三级缓存; \r自动装配; \r事务;","date":"2022-04-13T01:38:50.000Z","category":["目录"],"tag":["目录"]},["/java/spring/index.html","/java/spring/README.md"]],
  ["v-51893326","/java/spring/spring-transaction.html",{"title":"transaction","icon":"guanli","type":"article","readingTime":{"minutes":5.14,"words":1543},"excerpt":"spring 事务 Spring 事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring 是无法提供事务功能的。对于纯 JDBC 操作数据库，想要用到事务，可以按照以下步骤进行： 事务传播行为 spring特有的事务传播行为，spring支持7种事务传播行为，确定客户端和被调用端的事务边界 （说得通俗一点就是多个具有事务控制的service","date":"2021-10-20T00:00:00.000Z","category":["spring"],"tag":["spring","transaction"]},["/java/spring/spring-transaction","/java/spring/spring-transaction.md"]],
  ["v-5a0477de","/java/spring/spring.html",{"title":"3jicache&mvc","icon":"bxl-spring-boot","type":"article","readingTime":{"minutes":7.1,"words":2129},"excerpt":"spring mvc 工作原理 其中核心类是 DispatcherServlet，它是一个 Servlet，顶层是实现的Servlet接口。 客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler-> HandlerAdapter 会根据 Hand","date":"2022-04-13T01:38:50.000Z","category":["spring"],"tag":["spring"]},["/java/spring/spring","/java/spring/spring.md"]],
  ["v-350a7f9a","/java/spring/springboot-startup-process.html",{"title":"autowire","icon":"zidong-02","type":"article","readingTime":{"minutes":0.38,"words":115},"excerpt":"boot flow 自动装配流程 里面有一个 main 方法运行了一个 run()方法，在 run 方法中必须要传入一个被@SpringBootApplication 注解的类。 @SpringBootApplication SpringBoot 应用标注在某个类上说明这个类是 SpringBoot 的主配置类，SpringBoot 就会运行这个类的 mai","date":"2021-10-21T00:00:00.000Z","category":["spring"],"tag":["spring","transaction"]},["/java/spring/springboot-startup-process","/java/spring/springboot-startup-process.md"]],
  ["v-6b88a2ae","/note/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/Large%20Website%20Architecture%20Patterns.html",{"title":"","type":"article","readingTime":{"minutes":0.21,"words":64},"excerpt":"异步 计算机软件发展的一个重要目标和驱动力是降低软件耦合性。事物之间直接关系越少，就越少被彼此影响。 分层 分割 分布式 集群 缓存 冗余 自动化 安全","date":"2022-04-13T18:37:08.000Z"},["/note/大型网站技术架构/Large Website Architecture Patterns.html","/note/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/Large%20Website%20Architecture%20Patterns","/note/大型网站技术架构/Large Website Architecture Patterns.md","/note/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/Large%20Website%20Architecture%20Patterns.md"]],
  ["v-3706649a","/404.html",{"title":"","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/404"]],
  ["v-5bc93818","/category/",{"title":"分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/index.html"]],
  ["v-744d024e","/tag/",{"title":"标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"title":"文章","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/article/index.html"]],
  ["v-75ed4ea4","/encrypted/",{"title":"加密","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/encrypted/index.html"]],
  ["v-2897d318","/slides/",{"title":"幻灯片","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/slides/index.html"]],
  ["v-154dc4c4","/star/",{"title":"收藏","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/star/index.html"]],
  ["v-01560935","/timeline/",{"title":"时间轴","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/timeline/index.html"]],
  ["v-57b7a724","/category/algo/",{"title":"algo 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/algo/index.html"]],
  ["v-2827ceae","/tag/algo/",{"title":"algo 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/algo/index.html"]],
  ["v-58706565","/category/note/",{"title":"note 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/note/index.html"]],
  ["v-2926fcc3","/tag/sort/",{"title":"sort 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/sort/index.html"]],
  ["v-f96d488c","/category/%E7%9B%AE%E5%BD%95/",{"title":"目录 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/目录/","/category/%E7%9B%AE%E5%BD%95/index.html"]],
  ["v-00be579c","/tag/interview/",{"title":"interview 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/interview/index.html"]],
  ["v-db01289a","/category/expierence/",{"title":"expierence 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/expierence/index.html"]],
  ["v-33db7886","/tag/expierence/",{"title":"expierence 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/expierence/index.html"]],
  ["v-218d1f3d","/category/personal-planning/",{"title":"personal-planning 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/personal-planning/index.html"]],
  ["v-28e08cef","/tag/note/",{"title":"note 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/note/index.html"]],
  ["v-58c4e07f","/category/tool/",{"title":"tool 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/tool/index.html"]],
  ["v-6106c001","/tag/docker/",{"title":"docker 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/docker/index.html"]],
  ["v-3d184cee","/category/js/",{"title":"js 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/js/index.html"]],
  ["v-b310d42a","/tag/git/",{"title":"git 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/git/index.html"]],
  ["v-f228c952","/category/business/",{"title":"business 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/business/index.html"]],
  ["v-742fbe9b","/tag/kubernetes/",{"title":"kubernetes 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/kubernetes/index.html"]],
  ["v-60649a06","/category/%E9%9A%8F%E7%AC%94/",{"title":"随笔 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/随笔/","/category/%E9%9A%8F%E7%AC%94/index.html"]],
  ["v-475e8d5a","/tag/%E6%B3%A8%E9%87%8A/",{"title":"注释 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/注释/","/tag/%E6%B3%A8%E9%87%8A/index.html"]],
  ["v-60025b94","/category/fubuhi/",{"title":"fubuhi 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/fubuhi/index.html"]],
  ["v-b302da92","/tag/vue/",{"title":"vue 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/vue/index.html"]],
  ["v-5831b135","/category/java/",{"title":"java 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/java/index.html"]],
  ["v-a59eec78","/tag/%E7%9B%AE%E5%BD%95/",{"title":"目录 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/目录/","/tag/%E7%9B%AE%E5%BD%95/index.html"]],
  ["v-ed2fcb80","/category/concurrent/",{"title":"concurrent 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/concurrent/index.html"]],
  ["v-801db588","/tag/typescript/",{"title":"Typescript 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/typescript/index.html"]],
  ["v-2f44b04d","/category/thread/",{"title":"thread 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/thread/index.html"]],
  ["v-b3126996","/tag/es6/",{"title":"es6 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/es6/index.html"]],
  ["v-9717cc36","/category/mysql/",{"title":"mysql 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/mysql/index.html"]],
  ["v-c92a710c","/tag/%E5%8C%BB%E4%BF%9D%E4%B8%9A%E5%8A%A1/",{"title":"医保业务 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/医保业务/","/tag/%E5%8C%BB%E4%BF%9D%E4%B8%9A%E5%8A%A1/index.html"]],
  ["v-65f163c6","/category/jvm/",{"title":"jvm 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/jvm/index.html"]],
  ["v-0631ab84","/tag/%E5%A6%82%E6%98%AF%E6%88%91%E6%80%9D/",{"title":"如是我思 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/如是我思/","/tag/%E5%A6%82%E6%98%AF%E6%88%91%E6%80%9D/index.html"]],
  ["v-36307ecb","/category/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/",{"title":"消息队列 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/消息队列/","/category/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/index.html"]],
  ["v-b314b42a","/tag/cap/",{"title":"cap 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/cap/index.html"]],
  ["v-50ba4848","/category/message-queue/",{"title":"message-queue 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/message-queue/index.html"]],
  ["v-685162aa","/tag/fubushi/",{"title":"fubushi 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/fubushi/index.html"]],
  ["v-8848dfa8","/category/redis/",{"title":"redis 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/redis/index.html"]],
  ["v-3f698511","/tag/%E9%9B%86%E5%90%88/",{"title":"集合 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/集合/","/tag/%E9%9B%86%E5%90%88/index.html"]],
  ["v-bf63cb16","/category/fubushi/",{"title":"fubushi 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/fubushi/index.html"]],
  ["v-28a1d8bf","/tag/java/",{"title":"java 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/java/index.html"]],
  ["v-0ce25b6c","/category/%E5%88%86%E5%B8%83%E5%BC%8F/",{"title":"分布式 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/分布式/","/category/%E5%88%86%E5%B8%83%E5%BC%8F/index.html"]],
  ["v-f841e7a0","/tag/string/",{"title":"string 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/string/index.html"]],
  ["v-65f55f62","/category/soa/",{"title":"soa 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/soa/index.html"]],
  ["v-460a1b6c","/tag/concurrent/",{"title":"concurrent 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/concurrent/index.html"]],
  ["v-08073caa","/category/spring/",{"title":"spring 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/spring/index.html"]],
  ["v-b3160ccc","/tag/aqs/",{"title":"aqs 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/aqs/index.html"]],
  ["v-b76dc552","/tag/thread/",{"title":"thread 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/thread/index.html"]],
  ["v-afd66be6","/tag/synchronized/",{"title":"synchronized 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/synchronized/index.html"]],
  ["v-807750f6","/tag/thread-life-cycle/",{"title":"thread-life-cycle 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/thread-life-cycle/index.html"]],
  ["v-20b8e9fc","/tag/threadlocal/",{"title":"ThreadLocal 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/threadlocal/index.html"]],
  ["v-0df6968a","/tag/threadpool/",{"title":"threadpool 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/threadpool/index.html"]],
  ["v-1bee38ca","/tag/mysql/",{"title":"mysql 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/mysql/index.html"]],
  ["v-3102ad68","/tag/%E4%BC%98%E5%8C%96/",{"title":"优化 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/优化/","/tag/%E4%BC%98%E5%8C%96/index.html"]],
  ["v-6ebee387","/tag/%E7%B4%A2%E5%BC%95/",{"title":"索引 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/索引/","/tag/%E7%B4%A2%E5%BC%95/index.html"]],
  ["v-1d040e03","/tag/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/",{"title":"主从复制 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/主从复制/","/tag/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/index.html"]],
  ["v-26374ab8","/tag/%E4%BA%8B%E5%8A%A1/",{"title":"事务 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/事务/","/tag/%E4%BA%8B%E5%8A%A1/index.html"]],
  ["v-b305b122","/tag/sql/",{"title":"sql 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/sql/index.html"]],
  ["v-a50702d8","/tag/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/",{"title":"深拷贝和浅拷贝 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/深拷贝和浅拷贝/","/tag/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/index.html"]],
  ["v-b30dba08","/tag/jvm/",{"title":"jvm 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/jvm/index.html"]],
  ["v-257204d2","/tag/kafka/",{"title":"kafka 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/kafka/index.html"]],
  ["v-0da0d9fd","/tag/mq/",{"title":"mq 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/mq/index.html"]],
  ["v-5f7a9af8","/tag/redis-lock/",{"title":"redis lock 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/redis-lock/index.html"]],
  ["v-0d1f4c3c","/tag/redis/",{"title":"redis 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/redis/index.html"]],
  ["v-28c41ed6","/tag/lock/",{"title":"lock 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/lock/index.html"]],
  ["v-061a9e27","/tag/%E5%88%86%E5%B8%83%E5%BC%8Fid/",{"title":"分布式id 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/分布式id/","/tag/%E5%88%86%E5%B8%83%E5%BC%8Fid/index.html"]],
  ["v-b30533ae","/tag/tcc/",{"title":"tcc 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/tcc/index.html"]],
  ["v-4f468d65","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/",{"title":"分布式事务 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/分布式事务/","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/index.html"]],
  ["v-b305c2d0","/tag/soa/",{"title":"soa 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/soa/index.html"]],
  ["v-b30db0d4","/tag/jwt/",{"title":"jwt 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/jwt/index.html"]],
  ["v-2671299e","/tag/zookeeper/",{"title":"ZooKeeper 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/zookeeper/index.html"]],
  ["v-746eadae","/tag/requestbody&responsebody/",{"title":"RequestBody&ResponseBody 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/requestbody&responsebody/index.html"]],
  ["v-4bab9bd2","/tag/annotation/",{"title":"annotation 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/annotation/index.html"]],
  ["v-7d0ba9b4","/tag/spring/",{"title":"spring 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/spring/index.html"]],
  ["v-e180f342","/tag/transaction/",{"title":"transaction 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/transaction/index.html"]],
]

export const pagesRoutes = routeItems.reduce(
  (result, [name, path, meta, redirects]) => {
    result.push(
      {
        name,
        path,
        component: Vuepress,
        meta,
      },
      ...redirects.map((item) => ({
        path: item,
        redirect: path,
      }))
    )
    return result
  },
  [
    {
      name: "404",
      path: "/:catchAll(.*)",
      component: Vuepress,
    }
  ]
)
